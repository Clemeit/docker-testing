{"version":3,"sources":["components/transfers/TransfersTable.jsx","components/transfers/Transfers.jsx"],"names":["TransfersTable","props","FROZEN_DATA","server","activeTotal","activeTransfersFrom","activeTransfersTo","uniqueTotal","totalTransfersFrom","totalTransfersTo","React","useState","serverAggregateData","setServerAggregateData","useEffect","serverAggregate","forEach","i","Name","push","getCellText","portion","total","deltaColor","style","color","getTransferDelta","percentage","Math","round","className","map","textAlign","Transfers","DAY_ONLY","weekday","year","month","day","popupMessage","setPopupMessage","ignoreHCLCounts","setIgnoreHCLCounts","ignoreHCLTo","setIgnoreHCLTo","activeAndIgnoreHCLCounts","setActiveAndIgnoreHCLCounts","activeAndIgnoreHCLTo","setActiveAndIgnoreHCLTo","activeAndIgnoreHCLFrom","setActiveAndIgnoreHCLFrom","dataFailedToLoad","title","message","icon","fullscreen","reportMessage","zeroedOnFeb8","setZeroedOnFeb8","performDerivation","setPerformDerivation","transferCounts","setTransferCounts","transfersTo","setTransfersTo","transfersFrom","setTransfersFrom","fetchDelay","setTimeout","Fetch","then","val","data","dataPoint","x","y","catch","err","clearTimeout","firstGoodIndex","slice","lastTime","lastValue","diff","timeDiff","max","Date","getTime","abs","feb8Count","reverse","filter","set","id","logView","Log","Helmet","name","content","property","Banner","small","showTitle","showSubtitle","showButtons","hideOnMobile","hideVote","subtitle","PopupMessage","page","popMessage","BannerMessage","DataClassification","classification","marginBottom","PageMessage","fontSize","ContentCluster","description","ToggleButton","textA","textB","isA","isB","doA","doB","marginTop","type","checked","onChange","lastVal","smallBottomMargin","onClick","to","display","flexDirection","flexWrap","justifyContent","gap","ChartLine","curve","keys","indexBy","legendBottom","legendLeft","trendType","noArea","tooltipPrefix","padLeft","yMin","dateOptions"],"mappings":"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","file":"static/js/16.cf355686.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst TransfersTable = (props) => {\r\n  const FROZEN_DATA = [\r\n    {\r\n      server: \"Argonnessen\",\r\n      activeTotal: 21347,\r\n      activeTransfersFrom: 131,\r\n      activeTransfersTo: 0,\r\n      uniqueTotal: 68220,\r\n      totalTransfersFrom: 1994,\r\n      totalTransfersTo: 0,\r\n    },\r\n    {\r\n      server: \"Cannith\",\r\n      activeTotal: 11896,\r\n      activeTransfersFrom: 419,\r\n      activeTransfersTo: 0,\r\n      uniqueTotal: 43260,\r\n      totalTransfersFrom: 4123,\r\n      totalTransfersTo: 0,\r\n    },\r\n    {\r\n      server: \"Ghallanda\",\r\n      activeTotal: 28168,\r\n      activeTransfersFrom: 1143,\r\n      activeTransfersTo: 0,\r\n      uniqueTotal: 65831,\r\n      totalTransfersFrom: 9793,\r\n      totalTransfersTo: 0,\r\n    },\r\n    {\r\n      server: \"Khyber\",\r\n      activeTotal: 11595,\r\n      activeTransfersFrom: 174,\r\n      activeTransfersTo: 0,\r\n      uniqueTotal: 48287,\r\n      totalTransfersFrom: 2230,\r\n      totalTransfersTo: 51,\r\n    },\r\n\r\n    {\r\n      server: \"Orien (FREE)\",\r\n      activeTotal: 32862,\r\n      activeTransfersFrom: 5,\r\n      activeTransfersTo: 2259,\r\n      uniqueTotal: 101827,\r\n      totalTransfersFrom: 571,\r\n      totalTransfersTo: 20670,\r\n    },\r\n    {\r\n      server: \"Sarlona (FREE)\",\r\n      activeTotal: 11420,\r\n      activeTransfersFrom: 73,\r\n      activeTransfersTo: 335,\r\n      uniqueTotal: 55074,\r\n      totalTransfersFrom: 1243,\r\n      totalTransfersTo: 5059,\r\n    },\r\n    {\r\n      server: \"Thelanis\",\r\n      activeTotal: 12913,\r\n      activeTransfersFrom: 131,\r\n      activeTransfersTo: 0,\r\n      uniqueTotal: 52514,\r\n      totalTransfersFrom: 2111,\r\n      totalTransfersTo: 0,\r\n    },\r\n    {\r\n      server: \"Wayfinder\",\r\n      activeTotal: 8079,\r\n      activeTransfersFrom: 126,\r\n      activeTransfersTo: 0,\r\n      uniqueTotal: 22002,\r\n      totalTransfersFrom: 2055,\r\n      totalTransfersTo: 0,\r\n    },\r\n  ];\r\n\r\n  const [serverAggregateData, setServerAggregateData] = React.useState(null);\r\n  React.useEffect(() => {\r\n    let serverAggregate = [];\r\n    FROZEN_DATA.forEach((server, i) => {\r\n      if (server.Name !== \"Hardcore\") {\r\n        serverAggregate.push({\r\n          ...server,\r\n        });\r\n      }\r\n    });\r\n    setServerAggregateData(serverAggregate);\r\n  }, []);\r\n\r\n  const getCellText = (portion, total, deltaColor) => {\r\n    return portion <= 0 || total <= 0 ? (\r\n      <span style={{ color: \"var(--text-faded)\" }}>N/A</span>\r\n    ) : (\r\n      <span>\r\n        {portion} {getTransferDelta(portion, total, deltaColor)}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const getTransferDelta = (portion, total, deltaColor) => {\r\n    const percentage = Math.round((portion / total) * 1000) / 10;\r\n    let className = \"\";\r\n    if (percentage >= 1) {\r\n      className = deltaColor;\r\n    }\r\n    return <span className={className}>({percentage}%)</span>;\r\n  };\r\n\r\n  return (\r\n    <table className=\"content-table\">\r\n      <thead>\r\n        <tr>\r\n          <th>Server</th>\r\n          <th>Active Characters</th>\r\n          <th>Active Transfers From</th>\r\n          <th>Active Transfers To</th>\r\n          <th>Total Characters</th>\r\n          <th>Total Transfers From</th>\r\n          <th>Total Transfers To</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {serverAggregateData &&\r\n          serverAggregateData.map(\r\n            (\r\n              {\r\n                server,\r\n                uniqueTotal,\r\n                activeTotal,\r\n                totalTransfersTo,\r\n                activeTransfersTo,\r\n                totalTransfersFrom,\r\n                activeTransfersFrom,\r\n              },\r\n              i\r\n            ) => (\r\n              <tr key={i}>\r\n                <td>\r\n                  {server}\r\n                  {server === \"Orien\" || server === \"Sarlona\" ? \" (FREE)\" : \"\"}\r\n                </td>\r\n                <td style={{ textAlign: \"right\" }}>{activeTotal}</td>\r\n                <td style={{ textAlign: \"right\" }}>\r\n                  {getCellText(activeTransfersFrom, activeTotal, \"red-text\")}\r\n                </td>\r\n                <td style={{ textAlign: \"right\" }}>\r\n                  {getCellText(activeTransfersTo, activeTotal, \"green-text\")}\r\n                </td>\r\n                <td style={{ textAlign: \"right\" }}>{uniqueTotal}</td>\r\n                <td style={{ textAlign: \"right\" }}>\r\n                  {getCellText(totalTransfersFrom, uniqueTotal, \"red-text\")}\r\n                </td>\r\n                <td style={{ textAlign: \"right\" }}>\r\n                  {getCellText(totalTransfersTo, uniqueTotal, \"green-text\")}\r\n                </td>\r\n              </tr>\r\n            )\r\n          )}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default TransfersTable;\r\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport PopupMessage from \"../global/PopupMessage\";\r\nimport Banner from \"../global/Banner\";\r\nimport BannerMessage from \"../global/BannerMessage\";\r\nimport ContentCluster from \"../global/ContentCluster\";\r\nimport { Log } from \"../../services/CommunicationService\";\r\nimport ChartLine from \"../global/ChartLine\";\r\nimport { Fetch } from \"../../services/DataLoader\";\r\nimport ToggleButton from \"../global/ToggleButton\";\r\nimport { Link } from \"react-router-dom\";\r\nimport TransfersTable from \"./TransfersTable\";\r\nimport DataClassification from \"../global/DataClassification\";\r\nimport PageMessage from \"../global/PageMessage\";\r\n\r\nconst Transfers = () => {\r\n  const TITLE = \"Server Transfers\";\r\n  const DAY_ONLY = {\r\n    weekday: \"long\",\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  };\r\n\r\n  // Popup message\r\n  var [popupMessage, setPopupMessage] = React.useState(null);\r\n\r\n  const [ignoreHCLCounts, setIgnoreHCLCounts] = React.useState(true);\r\n  const [ignoreHCLTo, setIgnoreHCLTo] = React.useState(true);\r\n\r\n  const [activeAndIgnoreHCLCounts, setActiveAndIgnoreHCLCounts] =\r\n    React.useState(false);\r\n  const [activeAndIgnoreHCLTo, setActiveAndIgnoreHCLTo] = React.useState(false);\r\n  const [activeAndIgnoreHCLFrom, setActiveAndIgnoreHCLFrom] =\r\n    React.useState(false);\r\n\r\n  function dataFailedToLoad() {\r\n    setPopupMessage({\r\n      title: \"Some data failed to load\",\r\n      message:\r\n        \"Some of the reports on this page may have failed to load. Please refresh the page. If the issue continues, report it.\",\r\n      icon: \"warning\",\r\n      fullscreen: false,\r\n      reportMessage: \"Failed to fetch data.\",\r\n    });\r\n  }\r\n\r\n  function readAbout() {\r\n    Log(\"Transfers page\", \"Read about active characters\");\r\n    setPopupMessage({\r\n      title: \"Active Characters\",\r\n      message: (\r\n        <span>\r\n          We consider a character \"active\" when they meet ALL of the following\r\n          criteria:\r\n          <ul>\r\n            <li>\r\n              A character has moved areas (public or private) within 2 days of\r\n              last being online, AND\r\n            </li>\r\n            <li>\r\n              A character has run a quest (solo or in a group) within 7 days of\r\n              last being online, AND\r\n            </li>\r\n            <li>\r\n              A character has increased in level within 20 days of last being\r\n              online (max-level characters are excluded)\r\n            </li>\r\n          </ul>\r\n          <p>Transfering servers does not directly affect any of these.</p>\r\n          <p className=\"lfm-number\">\r\n            This is an art, not a science. If you have suggestions for improving\r\n            this algorithm, <Link to=\"/suggestions\">please let me know</Link>.\r\n          </p>\r\n        </span>\r\n      ),\r\n      icon: \"info\",\r\n      fullscreen: true,\r\n    });\r\n  }\r\n\r\n  const [zeroedOnFeb8, setZeroedOnFeb8] = React.useState(true);\r\n  const truncateDataRange = true;\r\n  const [performDerivation, setPerformDerivation] = React.useState(true);\r\n  const [transferCounts, setTransferCounts] = React.useState(null);\r\n  const [transfersTo, setTransfersTo] = React.useState(null);\r\n  const [transfersFrom, setTransfersFrom] = React.useState(null);\r\n\r\n  React.useEffect(() => {\r\n    let fetchDelay = setTimeout(() => {\r\n      Fetch(`https://api.ddoaudit.com/population/transfersto_ignorehcl`, 5000)\r\n        .then((val) => {\r\n          val.forEach((server) => {\r\n            let feb8Count = -1;\r\n            let finalCount = -1;\r\n            server.data.forEach((dataPoint) => {\r\n              if (dataPoint.x === \"2023-02-08T15:00:00.000Z\") {\r\n                feb8Count = dataPoint.y;\r\n              }\r\n              finalCount = dataPoint.y;\r\n            });\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          dataFailedToLoad();\r\n        });\r\n\r\n      Fetch(\r\n        `https://api.ddoaudit.com/population/transfersto_active_ignorehcl`,\r\n        5000\r\n      )\r\n        .then((val) => {\r\n          val.forEach((server) => {\r\n            let feb8Count = -1;\r\n            let finalCount = -1;\r\n            server.data.forEach((dataPoint) => {\r\n              if (dataPoint.x === \"2023-02-08T15:00:00.000Z\") {\r\n                feb8Count = dataPoint.y;\r\n              }\r\n              finalCount = dataPoint.y;\r\n            });\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          dataFailedToLoad();\r\n        });\r\n\r\n      Fetch(`https://api.ddoaudit.com/population/transfersfrom_ignorehcl`, 5000)\r\n        .then((val) => {\r\n          val.forEach((server) => {\r\n            let feb8Count = -1;\r\n            let finalCount = -1;\r\n            server.data.forEach((dataPoint) => {\r\n              if (dataPoint.x === \"2023-02-08T15:00:00.000Z\") {\r\n                feb8Count = dataPoint.y;\r\n              }\r\n              finalCount = dataPoint.y;\r\n            });\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          dataFailedToLoad();\r\n        });\r\n\r\n      Fetch(\r\n        `https://api.ddoaudit.com/population/transfersfrom_active_ignorehcl`,\r\n        5000\r\n      )\r\n        .then((val) => {\r\n          val.forEach((server) => {\r\n            let feb8Count = -1;\r\n            let finalCount = -1;\r\n            server.data.forEach((dataPoint) => {\r\n              if (dataPoint.x === \"2023-02-08T15:00:00.000Z\") {\r\n                feb8Count = dataPoint.y;\r\n              }\r\n              finalCount = dataPoint.y;\r\n            });\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          dataFailedToLoad();\r\n        });\r\n    }, 1000);\r\n\r\n    return () => clearTimeout(fetchDelay);\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    Fetch(\r\n      `https://api.ddoaudit.com/population/transfercounts${\r\n        activeAndIgnoreHCLCounts ? \"_active\" : \"\"\r\n      }${ignoreHCLCounts ? \"_ignorehcl\" : \"\"}`,\r\n      5000\r\n    )\r\n      .then((val) => {\r\n        if (truncateDataRange) {\r\n          val.forEach((server) => {\r\n            let firstGoodIndex = 0;\r\n            server.data.forEach((dataPoint, i) => {\r\n              if (dataPoint.x === \"2023-02-07T00:00:00.000Z\")\r\n                firstGoodIndex = i;\r\n            });\r\n            server.data = server.data.slice(firstGoodIndex);\r\n          });\r\n        }\r\n        if (performDerivation) {\r\n          // first derivative\r\n          val.forEach((server) => {\r\n            let lastTime = server.data[0].x;\r\n            let lastValue = server.data[0].y;\r\n            server.data.forEach((dataPoint) => {\r\n              const diff = dataPoint.y - lastValue;\r\n              const timeDiff = Math.max(\r\n                (new Date(dataPoint.x).getTime() -\r\n                  new Date(lastTime).getTime()) /\r\n                  (1000 * 60 * 60),\r\n                1\r\n              );\r\n              lastValue = dataPoint.y;\r\n              lastTime = dataPoint.x;\r\n              dataPoint.y = Math.round(Math.abs(diff, 0) / timeDiff);\r\n            });\r\n          });\r\n        } else {\r\n          if (zeroedOnFeb8) {\r\n            val.forEach((server) => {\r\n              let feb8Count = -1;\r\n              server.data.forEach((dataPoint) => {\r\n                if (dataPoint.x === \"2023-02-08T15:00:00.000Z\") {\r\n                  feb8Count = dataPoint.y;\r\n                }\r\n                if (feb8Count === -1) {\r\n                  dataPoint.y = 0;\r\n                } else {\r\n                  dataPoint.y = Math.max(dataPoint.y - feb8Count, 0);\r\n                }\r\n              });\r\n            });\r\n          }\r\n        }\r\n\r\n        setTransferCounts(val.reverse());\r\n      })\r\n      .catch((err) => {\r\n        dataFailedToLoad();\r\n      });\r\n  }, [\r\n    ignoreHCLCounts,\r\n    activeAndIgnoreHCLCounts,\r\n    performDerivation,\r\n    zeroedOnFeb8,\r\n  ]);\r\n\r\n  React.useEffect(() => {\r\n    Fetch(\r\n      `https://api.ddoaudit.com/population/transfersto${\r\n        activeAndIgnoreHCLTo ? \"_active\" : \"\"\r\n      }${ignoreHCLTo ? \"_ignorehcl\" : \"\"}`,\r\n      5000\r\n    )\r\n      .then((val) => {\r\n        if (truncateDataRange) {\r\n          val.forEach((server) => {\r\n            let firstGoodIndex = 0;\r\n            server.data.forEach((dataPoint, i) => {\r\n              if (dataPoint.x === \"2023-02-07T00:00:00.000Z\")\r\n                firstGoodIndex = i;\r\n            });\r\n            server.data = server.data.slice(firstGoodIndex);\r\n          });\r\n        }\r\n        if (performDerivation) {\r\n          // first derivative\r\n          val.forEach((server) => {\r\n            let lastTime = server.data[0].x;\r\n            let lastValue = server.data[0].y;\r\n            server.data.forEach((dataPoint) => {\r\n              const diff = dataPoint.y - lastValue;\r\n              const timeDiff = Math.max(\r\n                (new Date(dataPoint.x).getTime() -\r\n                  new Date(lastTime).getTime()) /\r\n                  (1000 * 60 * 60),\r\n                1\r\n              );\r\n              lastValue = dataPoint.y;\r\n              lastTime = dataPoint.x;\r\n              dataPoint.y = Math.round(Math.abs(diff, 0) / timeDiff);\r\n            });\r\n          });\r\n        } else {\r\n          if (zeroedOnFeb8) {\r\n            val.forEach((server) => {\r\n              let feb8Count = -1;\r\n              server.data.forEach((dataPoint) => {\r\n                if (dataPoint.x === \"2023-02-08T15:00:00.000Z\") {\r\n                  feb8Count = dataPoint.y;\r\n                }\r\n                if (feb8Count === -1) {\r\n                  dataPoint.y = 0;\r\n                } else {\r\n                  dataPoint.y = Math.max(dataPoint.y - feb8Count, 0);\r\n                }\r\n              });\r\n            });\r\n          }\r\n        }\r\n\r\n        setTransfersTo(val.filter((set) => set.id !== \"Hardcore\").reverse());\r\n      })\r\n      .catch((err) => {\r\n        dataFailedToLoad();\r\n      });\r\n  }, [ignoreHCLTo, activeAndIgnoreHCLTo, performDerivation, zeroedOnFeb8]);\r\n\r\n  React.useEffect(() => {\r\n    Fetch(\r\n      `https://api.ddoaudit.com/population/transfersfrom${\r\n        activeAndIgnoreHCLFrom ? \"_active_ignorehcl\" : \"\"\r\n      }`,\r\n      5000\r\n    )\r\n      .then((val) => {\r\n        if (truncateDataRange) {\r\n          val.forEach((server) => {\r\n            let firstGoodIndex = 0;\r\n            server.data.forEach((dataPoint, i) => {\r\n              if (dataPoint.x === \"2023-02-07T00:00:00.000Z\")\r\n                firstGoodIndex = i;\r\n            });\r\n            server.data = server.data.slice(firstGoodIndex);\r\n          });\r\n        }\r\n        if (performDerivation) {\r\n          // first derivative\r\n          val.forEach((server) => {\r\n            let lastTime = server.data[0].x;\r\n            let lastValue = server.data[0].y;\r\n            server.data.forEach((dataPoint) => {\r\n              const diff = dataPoint.y - lastValue;\r\n              const timeDiff = Math.max(\r\n                (new Date(dataPoint.x).getTime() -\r\n                  new Date(lastTime).getTime()) /\r\n                  (1000 * 60 * 60),\r\n                1\r\n              );\r\n              lastValue = dataPoint.y;\r\n              lastTime = dataPoint.x;\r\n              dataPoint.y = Math.round(Math.abs(diff, 0) / timeDiff);\r\n            });\r\n          });\r\n        } else {\r\n          if (zeroedOnFeb8) {\r\n            val.forEach((server) => {\r\n              let feb8Count = -1;\r\n              server.data.forEach((dataPoint) => {\r\n                if (dataPoint.x === \"2023-02-08T15:00:00.000Z\") {\r\n                  feb8Count = dataPoint.y;\r\n                }\r\n                if (feb8Count === -1) {\r\n                  dataPoint.y = 0;\r\n                } else {\r\n                  dataPoint.y = Math.max(dataPoint.y - feb8Count, 0);\r\n                }\r\n              });\r\n            });\r\n          }\r\n        }\r\n\r\n        setTransfersFrom(val.filter((set) => set.id !== \"Hardcore\").reverse());\r\n      })\r\n      .catch((err) => {\r\n        dataFailedToLoad();\r\n      });\r\n  }, [activeAndIgnoreHCLFrom, performDerivation, zeroedOnFeb8]);\r\n\r\n  React.useEffect(() => {\r\n    const logView = setTimeout(\r\n      () => Log(\"Transfers page\", \"Page viewed (v3)\"),\r\n      1000\r\n    );\r\n    return () => clearTimeout(logView);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>{TITLE}</title>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Explore character transfer trends. Discover where characters are moving, which servers are gaining, and which servers are losing.\"\r\n        />\r\n        <meta\r\n          property=\"og:image\"\r\n          content=\"/icons/logo-512px.png\"\r\n          data-react-helmet=\"true\"\r\n        />\r\n        <meta\r\n          property=\"twitter:image\"\r\n          content=\"/icons/logo-512px.png\"\r\n          data-react-helmet=\"true\"\r\n        />\r\n      </Helmet>\r\n      <Banner\r\n        small={true}\r\n        showTitle={true}\r\n        showSubtitle={true}\r\n        showButtons={false}\r\n        hideOnMobile={true}\r\n        hideVote={true}\r\n        title=\"Server Transfers\"\r\n        subtitle=\"The Movement of Characters\"\r\n      />\r\n      <PopupMessage\r\n        page=\"transfers\"\r\n        message={popupMessage}\r\n        popMessage={() => {\r\n          setPopupMessage(null);\r\n        }}\r\n      />\r\n      <div className=\"content-container\">\r\n        <BannerMessage page=\"transfers\" />\r\n        <DataClassification classification=\"inferred\" />\r\n        <div className=\"top-content-padding-small shrink-on-mobile\" />\r\n        <div className=\"content-cluster\" style={{ marginBottom: \"2rem\" }}>\r\n          <PageMessage\r\n            fontSize=\"1.4\"\r\n            title=\"Historical Data\"\r\n            message={<>These reports were frozen on April 30, 2023.</>}\r\n          />\r\n        </div>\r\n        <ContentCluster\r\n          title=\"Important Changes\"\r\n          description={\r\n            <>\r\n              <p>\r\n                The original reports were rather confusing and led to a lot of\r\n                misinformation being circulated. I've changed how the data is\r\n                presented to be more in line with what players expected.\r\n              </p>\r\n              <p>\r\n                For anyone curious, the reports now display the first derivative\r\n                of the underlying data. You can swap between the two methods\r\n                with the toggle button below.\r\n              </p>\r\n              <ToggleButton\r\n                className=\"wide\"\r\n                textA=\"New Reports (Instantaneous)\"\r\n                textB=\"Old Reports (Cumulative)\"\r\n                isA={performDerivation}\r\n                isB={!performDerivation}\r\n                doA={() => {\r\n                  setPerformDerivation(true);\r\n                }}\r\n                doB={() => {\r\n                  setPerformDerivation(false);\r\n                }}\r\n              />\r\n              {!performDerivation && (\r\n                <label style={{ marginTop: \"10px\" }}>\r\n                  <input\r\n                    className=\"input-radio\"\r\n                    name=\"showeligiblecharacters\"\r\n                    type=\"checkbox\"\r\n                    checked={zeroedOnFeb8}\r\n                    onChange={() => {\r\n                      setZeroedOnFeb8((lastVal) => !lastVal);\r\n                    }}\r\n                  />\r\n                  Zeroed at the start of the free transfer period\r\n                </label>\r\n              )}\r\n            </>\r\n          }\r\n          smallBottomMargin={true}\r\n        />\r\n        <ContentCluster\r\n          title=\"About Server Transfers\"\r\n          description={\r\n            <span>\r\n              <ul>\r\n                <li>\r\n                  A \"transfer character\" is defined as a character that is\r\n                  currently playing on a different server than the one they were\r\n                  created on.\r\n                </li>\r\n                <li>\r\n                  <span className=\"lfm-number\">\r\n                    A transfer is counted when the transferred character logs in\r\n                    for the first time on the new server, NOT at the time of the\r\n                    transfer being completed.\r\n                  </span>\r\n                </li>\r\n                <li>\r\n                  This is a experimental feature, and it deals with a new set of\r\n                  data.{\" \"}\r\n                  <span className=\"lfm-number\">\r\n                    There may be inconsistencies.\r\n                  </span>\r\n                </li>\r\n                <li>\r\n                  Information about{\" \"}\r\n                  <span className=\"faux-link\" onClick={() => readAbout()}>\r\n                    \"active characters\"\r\n                  </span>\r\n                  .\r\n                </li>\r\n              </ul>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"row\",\r\n                  flexWrap: \"wrap\",\r\n                  justifyContent: \"space-between\",\r\n                }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    gap: \"7px\",\r\n                  }}\r\n                >\r\n                  <span>Thanks, Clemeit</span>\r\n                </div>\r\n              </div>\r\n            </span>\r\n          }\r\n          smallBottomMargin={true}\r\n        />\r\n        <ContentCluster\r\n          title=\"Summary Table\"\r\n          description={\r\n            <span>\r\n              Total transfer counts and transfer counts as a percentage of total\r\n              server population. Hardcore League is ignored completely. Some\r\n              information is unavailable or statistically insignificant.\r\n            </span>\r\n          }\r\n        >\r\n          <TransfersTable />\r\n        </ContentCluster>\r\n        <ContentCluster\r\n          title=\"Total Counts\"\r\n          description={\r\n            <>\r\n              {performDerivation ? (\r\n                <p>\r\n                  An approximation of the number of character transfers per\r\n                  hour.{\" \"}\r\n                  <span className=\"lfm-number\">\r\n                    Transfers are counted the first time the character logs in,\r\n                    NOT necessarily when the transfer is made.\r\n                  </span>\r\n                </p>\r\n              ) : (\r\n                <p>\r\n                  The total number of transfer characters{\" \"}\r\n                  <span className=\"lfm-number\">\r\n                    online within the last 90 days\r\n                  </span>\r\n                  . This is a cumulative count.\r\n                </p>\r\n              )}\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"row\",\r\n                  flexWrap: \"wrap\",\r\n                  gap: \"10px\",\r\n                }}\r\n              >\r\n                <ToggleButton\r\n                  className=\"wide\"\r\n                  textA=\"All Characters\"\r\n                  textB=\"Active Characters\"\r\n                  isA={!activeAndIgnoreHCLCounts}\r\n                  isB={activeAndIgnoreHCLCounts}\r\n                  doA={() => {\r\n                    setActiveAndIgnoreHCLCounts(false);\r\n                  }}\r\n                  doB={() => {\r\n                    setIgnoreHCLCounts(true);\r\n                    setActiveAndIgnoreHCLCounts(true);\r\n                  }}\r\n                />\r\n                <ToggleButton\r\n                  className={`wide${\r\n                    activeAndIgnoreHCLCounts ? \" disabled\" : \"\"\r\n                  }`}\r\n                  textA=\"Exclude HCL Transfers\"\r\n                  textB=\"Include HCL Transfers\"\r\n                  isA={ignoreHCLCounts}\r\n                  isB={!ignoreHCLCounts}\r\n                  doA={() => {\r\n                    setIgnoreHCLCounts(true);\r\n                  }}\r\n                  doB={() => {\r\n                    setIgnoreHCLCounts(false);\r\n                    setActiveAndIgnoreHCLCounts(false);\r\n                  }}\r\n                />\r\n              </div>\r\n            </>\r\n          }\r\n        >\r\n          <ChartLine\r\n            curve=\"linear\"\r\n            keys={null}\r\n            indexBy={null}\r\n            legendBottom=\"Day\"\r\n            legendLeft=\"Total Transfer Characters\"\r\n            data={transferCounts}\r\n            title=\"Transfer Characters\"\r\n            marginBottom={100}\r\n            trendType=\"quarter\"\r\n            noArea={true}\r\n            tooltipPrefix=\"Day\"\r\n            padLeft={true}\r\n            yMin=\"auto\"\r\n            dateOptions={DAY_ONLY}\r\n          />\r\n        </ContentCluster>\r\n        <ContentCluster\r\n          title={`Transfers \"To\"`}\r\n          description={\r\n            <>\r\n              {performDerivation ? (\r\n                <p>\r\n                  An approximation of the number of character transfers per hour{\" \"}\r\n                  <i>to</i> each server. Servers with a high transfer count are\r\n                  gaining characters from other servers.{\" \"}\r\n                  <span className=\"lfm-number\">\r\n                    Transfers are counted the first time the character logs in,\r\n                    NOT necessarily when the transfer is made.\r\n                  </span>\r\n                </p>\r\n              ) : (\r\n                <p>\r\n                  The cumulative number of characters transferred <i>to</i> each\r\n                  server{\" \"}\r\n                  <span className=\"lfm-number\">\r\n                    online within the last 90 days\r\n                  </span>\r\n                  . Servers with a high transfer count have gained characters\r\n                  from other servers. This is a cumulative count.\r\n                </p>\r\n              )}\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"row\",\r\n                  flexWrap: \"wrap\",\r\n                  gap: \"10px\",\r\n                }}\r\n              >\r\n                <ToggleButton\r\n                  className=\"wide\"\r\n                  textA=\"All Characters\"\r\n                  textB=\"Active Characters\"\r\n                  isA={!activeAndIgnoreHCLTo}\r\n                  isB={activeAndIgnoreHCLTo}\r\n                  doA={() => {\r\n                    setActiveAndIgnoreHCLTo(false);\r\n                  }}\r\n                  doB={() => {\r\n                    setIgnoreHCLTo(true);\r\n                    setActiveAndIgnoreHCLTo(true);\r\n                  }}\r\n                />\r\n                <ToggleButton\r\n                  className={`wide${activeAndIgnoreHCLTo ? \" disabled\" : \"\"}`}\r\n                  textA=\"Exclude HCL Transfers\"\r\n                  textB=\"Include HCL Transfers\"\r\n                  isA={ignoreHCLTo}\r\n                  isB={!ignoreHCLTo}\r\n                  doA={() => {\r\n                    setIgnoreHCLTo(true);\r\n                  }}\r\n                  doB={() => {\r\n                    setIgnoreHCLTo(false);\r\n                  }}\r\n                />\r\n              </div>\r\n            </>\r\n          }\r\n        >\r\n          <ChartLine\r\n            curve=\"linear\"\r\n            keys={null}\r\n            indexBy={null}\r\n            legendBottom=\"Day\"\r\n            legendLeft=\"Total Transfer Characters\"\r\n            data={transfersTo}\r\n            title=\"Transfer Characters To\"\r\n            marginBottom={100}\r\n            trendType=\"quarter\"\r\n            noArea={true}\r\n            tooltipPrefix=\"Day\"\r\n            padLeft={true}\r\n            yMin=\"auto\"\r\n            dateOptions={DAY_ONLY}\r\n          />\r\n        </ContentCluster>\r\n        <ContentCluster\r\n          title={`Transfers \"From\"`}\r\n          description={\r\n            <>\r\n              {performDerivation ? (\r\n                <p>\r\n                  An approximation of the number of character transfers per hour{\" \"}\r\n                  <i>from</i> each server. Servers with a high transfer count\r\n                  are losing characters to other servers.{\" \"}\r\n                  <span className=\"lfm-number\">\r\n                    Transfers are counted the first time the character logs in,\r\n                    NOT necessarily when the transfer is made.\r\n                  </span>\r\n                </p>\r\n              ) : (\r\n                <p>\r\n                  The cumulative number of characters transferred <i>from</i>{\" \"}\r\n                  each server{\" \"}\r\n                  <span className=\"lfm-number\">\r\n                    online within the last 90 days\r\n                  </span>\r\n                  . Servers with a high transfer count have lost characters to\r\n                  other servers. This is a cumulative count.\r\n                </p>\r\n              )}\r\n              <ToggleButton\r\n                className=\"wide\"\r\n                textA=\"All Characters\"\r\n                textB=\"Active Characters\"\r\n                isA={!activeAndIgnoreHCLFrom}\r\n                isB={activeAndIgnoreHCLFrom}\r\n                doA={() => {\r\n                  setActiveAndIgnoreHCLFrom(false);\r\n                }}\r\n                doB={() => {\r\n                  setActiveAndIgnoreHCLFrom(true);\r\n                }}\r\n              />\r\n            </>\r\n          }\r\n        >\r\n          <ChartLine\r\n            curve=\"linear\"\r\n            keys={null}\r\n            indexBy={null}\r\n            legendBottom=\"Day\"\r\n            legendLeft=\"Total Transfer Characters\"\r\n            data={transfersFrom}\r\n            title=\"Transfer Characters From\"\r\n            marginBottom={100}\r\n            trendType=\"quarter\"\r\n            noArea={true}\r\n            tooltipPrefix=\"Day\"\r\n            padLeft={true}\r\n            yMin=\"auto\"\r\n            dateOptions={DAY_ONLY}\r\n          />\r\n        </ContentCluster>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Transfers;\r\n"],"sourceRoot":""}