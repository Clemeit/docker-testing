{"version":3,"sources":["components/global/NoMobileOptimization.jsx","assets/global/sort.svg","components/quests/ReportQuest.jsx","components/quests/QuestTable.jsx","components/quests/LoadingOverlay.jsx","components/quests/Quests.jsx"],"names":["NoMobileOptimization","props","className","style","display","flexDirection","justifyContent","width","fontSize","lineHeight","color","textAlign","verticalAlign","_path","_path2","ReportQuest","React","useState","additionalText","setAdditionalText","close","hideForm","visible","onClick","position","top","right","cursor","backgroundColor","opacity","marginTop","marginBottom","id","placeholder","value","onChange","e","target","gap","Submit","reportedQuest","_excluded","_extends","Object","assign","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgSort","_ref","svgRef","title","titleId","xmlns","height","viewBox","fill","ref","d","ForwardRef","ContentTable","questLevelString","quest","isepic","level","questXpPerMinuteString","Math","round","xp","averagetime","maxHeight","collapsed","data","alignItems","handleSort","map","handleSelection","pageNumber","pageSize","textDecoration","name","groupsize","fontWeight","marginLeft","reportQuest","stopPropagation","requiredadventurepack","sec","datapoints","LoadingOverlay","message","Quests","updateTime","questnamefiltertimeout","adventurepackfiltertimeout","levelfiltertimeout","isLoading","setIsLoading","questList","set_questList","filteredQuestList","set_filteredQuestList","paginatedQuestList","set_paginatedQuestList","set_pageNumber","durationData","set_durationData","popularityOverTimeData","set_popularityOverTimeData","durationOverTimeData","set_durationOverTimeData","totalTime","set_totalTime","totalDataPoints","set_totalDataPoints","serverDistData","set_serverDistData","standardDeviation","set_standardDeviation","datetimeData","set_datetimeData","todData","set_todData","average","set_average","outlierCount","set_outlierCount","questName","set_questName","questNameFilter","set_questNameFilter","adventurePackFilter","setAdventurePackFilter","levelFilter","set_levelFilter","sortStyle","set_sortStyle","sortDirection","setSortDirection","isRunning","set_isRunning","tableSize","ellapsedTime","set_ellapsedTime","startTime","set_startTime","reportFormVisible","setReportFormVisible","setReportedQuest","earliestEntryDate","setEarliestEntryDate","showRaidsOnly","setShowRaidsOnly","dateToDateString","dt","getFullYear","toString","getMonth","padStart","getDate","levelFilters","split","filter","entry","toLowerCase","includes","valid","forEach","f","isNaN","lower","upper","parseInt","sort","a","b","sortmod","localeCompare","aadventurepack","badventurepack","slice","max","min","total","popupMessage","setPopupMessage","Helmet","content","property","PopupMessage","page","popMessage","Banner","small","showTitle","showSubtitle","showButtons","hideOnMobile","hideVote","subtitle","BannerMessage","DataClassification","classification","ContentCluster","description","starttime","Date","setInterval","questlist","Post","questtype","then","val","epics","Array","push","clearTimeout","catch","icon","fullscreen","reportMessage","runAudit","disabled","margin","padding","noFade","flexWrap","paddingBottom","htmlFor","maxWidth","type","setTimeout","questname","document","getElementById","adventurepack","levelfilter","checked","QuestTable","showLastUpdated","low","high","questid","minimumlevel","maximumlevel","firstentrydate","bincount","values","servercounts","start","getTime","duration","SERVER_LIST","server","std","mathStd","ave","bins","freq","binstep","bin","index","durationdata","Duration","Frequency","serverdistrdata","COLORS","label","reverse","days","instances","tod","tod_instances","hour","dow","getDay","getHours","floor","datetimedata","h","Time","Instances","tod_data","thistotalduration","dailypopularity","dailyaverageduration","thiscount","thisday","ent","entryday","x","y","loadQuest","ceil","o","marginRight","altTitle","ChartBar","indexBy","legendBottom","legendLeft","loadingMessage","noAnim","hideLegend","ChartLine","trendType","curve","ChartPie","useDataColors","forceHardcore"],"mappings":"wGAAA,wBA6BeA,IA1Bc,SAACC,GAC5B,OACE,qBACEC,UAAU,iBACVC,MAAO,CACLC,QAAS,OACTC,cAAe,MACfC,eAAgB,SAChBC,MAAO,QANX,SASE,oBACEJ,MAAO,CACLK,SAAU,SACVC,WAAY,SACZC,MAAO,oBACPC,UAAW,UALf,UAQE,cAAC,IAAD,CAAYR,MAAO,CAAES,cAAe,SARtC,yD,gECdFC,EAAOC,E,8DC2FIC,EAvFK,SAACd,GACnB,MAA4Ce,IAAMC,SAAS,IAA3D,mBAAOC,EAAP,KAAuBC,EAAvB,KAYA,SAASC,IACPD,EAAkB,IAClBlB,EAAMoB,WAGR,OACE,gCACGpB,EAAMqB,SACL,qBAAKpB,UAAU,UAAUqB,QAAS,kBAAMtB,EAAMoB,cAE/CpB,EAAMqB,SACL,sBAAKpB,UAAU,yBAAf,UACE,cAAC,IAAD,CACEA,UAAU,YACVC,MAAO,CACLqB,SAAU,WACVC,IAAK,MACLC,MAAO,MACPC,OAAQ,WAEVJ,QAAS,kBAAMH,OAEjB,oBAAIlB,UAAU,wBAAd,0BACA,oBACEC,MAAO,CACLyB,gBAAiB,cACjBC,QAAS,GACTC,UAAW,SACXC,aAAc,YAGlB,mBAAG5B,MAAO,CAAEK,SAAU,UAAtB,gIAIA,uBACEwB,GAAG,iBACHC,YAAY,0BACZ9B,MAAO,CACLI,MAAO,OACPC,SAAU,UAEZ0B,MAAOhB,EACPiB,SAAU,SAACC,GAAD,OAAOjB,EAAkBiB,EAAEC,OAAOH,UAE9C,sBACE/B,MAAO,CACLC,QAAS,OACTC,cAAe,MACfC,eAAgB,WAChBgC,IAAK,OACLR,UAAW,QANf,UASE,qBACE5B,UAAU,iCACVqB,QAAS,kBAAMH,KAFjB,oBAMA,qBACElB,UAAU,+BACVC,MAAO,CAAEI,MAAO,QAASI,UAAW,UACpCY,QAAS,kBAvEnBgB,YACE,0BAA4BtC,EAAMuC,cAClCtB,GAAkB,mBAGpBE,KA+DQ,8B,yBD3ERqB,G,OAAY,CAAC,QAAS,YAE1B,SAASC,IAA2Q,OAA9PA,EAAWC,OAAOC,QAAU,SAAUP,GAAU,IAAK,IAAIQ,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,IAAIG,EAASF,UAAUD,GAAI,IAAK,IAAII,KAAOD,EAAcL,OAAOO,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQZ,EAAOY,GAAOD,EAAOC,IAAY,OAAOZ,GAAkBK,EAASW,MAAMC,KAAMR,WAEhT,SAASS,EAAyBP,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAAkEC,EAAKJ,EAAnER,EAEzF,SAAuCW,EAAQQ,GAAY,GAAc,MAAVR,EAAgB,MAAO,GAAI,IAA2DC,EAAKJ,EAA5DR,EAAS,GAAQoB,EAAad,OAAOe,KAAKV,GAAqB,IAAKH,EAAI,EAAGA,EAAIY,EAAWV,OAAQF,IAAOI,EAAMQ,EAAWZ,GAAQW,EAASG,QAAQV,IAAQ,IAAaZ,EAAOY,GAAOD,EAAOC,IAAQ,OAAOZ,EAFxMuB,CAA8BZ,EAAQQ,GAAuB,GAAIb,OAAOkB,sBAAuB,CAAE,IAAIC,EAAmBnB,OAAOkB,sBAAsBb,GAAS,IAAKH,EAAI,EAAGA,EAAIiB,EAAiBf,OAAQF,IAAOI,EAAMa,EAAiBjB,GAAQW,EAASG,QAAQV,IAAQ,GAAkBN,OAAOO,UAAUa,qBAAqBX,KAAKJ,EAAQC,KAAgBZ,EAAOY,GAAOD,EAAOC,IAAU,OAAOZ,EAMne,SAAS2B,EAAQC,EAAMC,GACrB,IAAIC,EAAQF,EAAKE,MACbC,EAAUH,EAAKG,QACfnE,EAAQsD,EAAyBU,EAAMxB,GAE3C,OAAoB,gBAAoB,MAAOC,EAAS,CACtD2B,MAAO,6BACPC,OAAQ,OACRC,QAAS,YACThE,MAAO,OACPiE,KAAM,UACNC,IAAKP,EACL,kBAAmBE,GAClBnE,GAAQkE,EAAqB,gBAAoB,QAAS,CAC3DnC,GAAIoC,GACHD,GAAS,KAAMtD,IAAUA,EAAqB,gBAAoB,OAAQ,CAC3E6D,EAAG,gBACHF,KAAM,UACH1D,IAAWA,EAAsB,gBAAoB,OAAQ,CAChE4D,EAAG,8HAIP,IAAIC,EAA0B,aAAiBX,GEmKhCY,GFlKA,IEhCM,SAAC3E,GACpB,MAAyCe,IAAMC,SAAS,MAAxD,6BAgBA,SAAS4D,EAAiBC,GACxB,MAAM,GAAN,OAAWA,EAAMC,OAAoC,GAA3B,WAAaD,EAAME,OAA7C,OACEF,EAAMC,OAAS,SAAWD,EAAME,MAAQ,IAI5C,SAASC,EAAuBH,GAC9B,MAAM,GAAN,OACGA,EAAMC,OAEH,GADA,OAASG,KAAKC,MAAML,EAAMM,IAAMN,EAAMO,YAAc,MAF1D,OAKEP,EAAMC,OACF,OAASG,KAAKC,MAAML,EAAMM,IAAMN,EAAMO,YAAc,KACpD,IAIR,OACE,8BACE,qBACEnF,UAAW,0BACXC,MAAO,CACLC,QAAS,OACTE,eAAgB,SAChBgE,OAAQ,cACRgB,UAAWrF,EAAMsF,UAAY,QAAU,IAN3C,SASkB,OAAftF,EAAMuF,KACL,qBACEtF,UAAU,uBACVC,MAAO,CACLmE,OAAQ,QACRlE,QAAS,OACTE,eAAgB,SAChBmF,WAAY,UANhB,SASE,iEAGF,wBAAOvF,UAAU,gBAAjB,UACE,gCACE,+BACE,uBACA,qBACEqB,QAAS,kBAAMtB,EAAMyF,WAAW,SAChCvF,MAAO,CACLwB,OAAQ,WAHZ,mBASQ,cAAC,EAAD,CAASzB,UAAU,8BAE3B,qBACEqB,QAAS,kBAAMtB,EAAMyF,WAAW,UAChCvF,MAAO,CACLwB,OAAQ,WAHZ,mBASQ,cAAC,EAAD,CAASzB,UAAU,8BAE3B,qBACEqB,QAAS,kBAAMtB,EAAMyF,WAAW,mBAChCvF,MAAO,CACLwB,OAAQ,WAHZ,4BASiB,cAAC,EAAD,CAASzB,UAAU,8BAEpC,qBACEqB,QAAS,kBAAMtB,EAAMyF,WAAW,OAChCvF,MAAO,CACLwB,OAAQ,WAHZ,oBASS,cAAC,EAAD,CAASzB,UAAU,8BAE5B,qBACEqB,QAAS,kBAAMtB,EAAMyF,WAAW,aAChCvF,MAAO,CACLwB,OAAQ,WAHZ,6BASmB,IACjB,cAAC,EAAD,CAASzB,UAAU,8BAErB,qBACEqB,QAAS,kBAAMtB,EAAMyF,WAAW,cAChCvF,MAAO,CACLwB,OAAQ,WAHZ,uBASY,cAAC,EAAD,CAASzB,UAAU,mCAInC,gCACGD,EAAMuF,KAAKG,KAAI,SAACb,EAAOjC,GAAR,OACd,qBACE3C,UAAU,8BAEVqB,QAAS,WACPtB,EAAM2F,gBAAgBd,IAJ1B,UAOE,6BAAKjC,EAAI,EAAI5C,EAAM4F,WAAa5F,EAAM6F,WACtC,qBACE3F,MAAO,CACLC,QAAS,OACTC,cAAe,OAHnB,UAME,qBACEF,MAAO,CACLwB,OAAQ,UACRoE,eAAgB,YAChBxF,MAAO,eAJX,SAOGuE,EAAMkB,OAEY,SAApBlB,EAAMmB,WACL,sBACE9F,MAAO,CACL+F,WAAY,OACZxF,MAAO,MACPyF,WAAY,MACZtE,QAAS,IALb,eAWF,qBACE3B,UAAU,sBACVqB,QAAS,SAACa,GACRnC,EAAMmG,YAAYtB,EAAMkB,MACxB5D,EAAEiE,mBAJN,uBAUF,6BAAKxB,EAAiBC,KACtB,6BAAKA,EAAMwB,uBAAyB,KACpC,6BAAKrB,EAAuBH,KAC5B,8BA7KWyB,EA6KYzB,EAAMO,YA5KvCkB,EAAM,GACF,GAAN,OAAUrB,KAAKC,MAAOoB,EAAM,GAAM,IAAM,GAAxC,YAEM,GAAN,OAAUA,EAAV,eA0KY,6BAAKzB,EAAM0B,eA/CN1B,EAAMkB,MA/H3B,IAA2BO,gB,kDCHdE,EARQ,SAACxG,GACtB,OACE,qBAAKC,UAAU,kBAAf,SACE,+BAAOD,EAAMyG,SAAW,oC,iCC4iCfC,UArhCA,SAAC1G,GACd,IAyCI2G,EAucAC,EASAC,EASAC,EAlgBJ,EAAkC/F,YAAe,GAAjD,mBAAOgG,EAAP,KAAkBC,EAAlB,KACA,EAAmCjG,WAAe,MAAlD,mBAAOkG,EAAP,KAAkBC,EAAlB,KACA,EAAmDnG,WAAe,MAAlE,mBAAOoG,EAAP,KAA0BC,EAA1B,KACA,EAAqDrG,WAAe,MAApE,mBAAOsG,EAAP,KAA2BC,EAA3B,KACA,EAAqCvG,YAAgB,GAArD,mBAAO6E,EAAP,KAAmB2B,EAAnB,KAEA,EAAyCxG,WAAe,MAAxD,mBAAOyG,EAAP,KAAqBC,EAArB,KACA,EACE1G,WAAe,MADjB,mBAAO2G,EAAP,KAA+BC,EAA/B,KAEA,GAAyD5G,WAAe,MAAxE,qBAAO6G,GAAP,MAA6BC,GAA7B,MACA,GAAmC9G,WAAe,MAAlD,qBAAO+G,GAAP,MAAkBC,GAAlB,MACA,GAA+ChH,WAAe,MAA9D,qBAAOiH,GAAP,MAAwBC,GAAxB,MACA,GAA6ClH,WAAe,MAA5D,qBAAOmH,GAAP,MAAuBC,GAAvB,MACA,GAAmDpH,WAAe,MAAlE,qBAAOqH,GAAP,MAA0BC,GAA1B,MACA,GAAyCtH,WAAe,MAAxD,qBAAOuH,GAAP,MAAqBC,GAArB,MACA,GAA+BxH,WAAe,MAA9C,qBAAOyH,GAAP,MAAgBC,GAAhB,MACA,GAA+B1H,WAAe,MAA9C,qBAAO2H,GAAP,MAAgBC,GAAhB,MACA,GAAyC5H,WAAe,MAAxD,qBAAO6H,GAAP,MAAqBC,GAArB,MACA,GAAmC9H,WAAe,MAAlD,qBAAO+H,GAAP,MAAkBC,GAAlB,MACA,GAA+ChI,WAAe,IAA9D,qBAAOiI,GAAP,MAAwBC,GAAxB,MACA,GAAsDlI,WAAe,IAArE,qBAAOmI,GAAP,MAA4BC,GAA5B,MACA,GAAuCpI,WAAe,IAAtD,qBAAOqI,GAAP,MAAoBC,GAApB,MACA,GAAmCtI,WAAe,aAAlD,qBAAOuI,GAAP,MAAkBC,GAAlB,MACA,GAA0CxI,WAAe,cAAzD,qBAAOyI,GAAP,MAAsBC,GAAtB,MACA,GAAmC1I,YAAe,GAAlD,qBAAO2I,GAAP,MAAkBC,GAAlB,MACA,GAAmC5I,WAAe,MAAlD,qBAAO6I,GAAP,MACA,IADA,MACyC7I,WAAe,IAAxD,qBAAO8I,GAAP,MAAqBC,GAArB,MACA,GAAmC/I,WAAe,MAAlD,qBAAOgJ,GAAP,MAAkBC,GAAlB,MACA,GAAkDjJ,YAAe,GAAjE,qBAAOkJ,GAAP,MAA0BC,GAA1B,MACA,GAA0CnJ,WAAe,MAAzD,qBAAOwB,GAAP,MAAsB4H,GAAtB,MACA,GAAkDpJ,WAAe,MAAjE,qBAAOqJ,GAAP,MAA0BC,GAA1B,MACA,GAA0CtJ,YAAe,GAAzD,qBAAOuJ,GAAP,MAAsBC,GAAtB,MAgOA,SAASC,GAAiBC,GACxB,MAAM,GAAN,OAAUA,EAAGC,cAAcC,WAA3B,aAA0CF,EAAGG,WAAa,GACvDD,WACAE,SAAS,EAAG,KAFf,YAEuBJ,EAAGK,UAAUH,WAAWE,SAAS,EAAG,MA1F7D9J,aAAgB,WACd,GAAkB,OAAdkG,EAAJ,CAIA,IAAI8D,EAAe3B,GAAY4B,MAAM,KACrC5D,EACEH,EACGgE,QAAO,SAACC,GAAD,OAAYZ,IAAoC,SAApBY,EAAMlF,aACzCiF,QAAO,SAACC,GAAD,OACNA,EAAMnF,KAAKoF,cAAcC,SAASpC,GAAgBmC,kBAEnDF,QAAO,SAACC,GAAD,uBACNA,EAAM7E,6BADA,aACN,EACI8E,cACDC,SAASlC,GAAoBiC,kBAEjCF,QAAO,SAACC,GACP,GAAoB,KAAhB9B,GAAoB,OAAO,EAC/B,IAAIiC,GAAQ,EAqBZ,OApBAN,EAAaO,SAAQ,SAACC,GACpB,GAAKC,MAAMD,GAIJ,CACL,GAA4B,IAAxBA,EAAEP,MAAM,KAAKlI,OAEf,YADAuI,GAAQ,GAGV,IAAII,EAAQF,EAAEP,MAAM,KAAK,GACrBU,EAAQH,EAAEP,MAAM,KAAK,GAEvBE,EAAMnG,OAAS4G,SAASD,IACxBR,EAAMnG,OAAS4G,SAASF,KAExBJ,GAAQ,QAdNH,EAAMnG,QAAU4G,SAASJ,KAC3BF,GAAQ,MAiBPA,KAERO,MAAK,SAAUC,EAAGC,GACjB,IAAIC,EAAU,EAEd,GADsB,eAAlBvC,KAAgCuC,GAAW,GAC7B,aAAdzC,GACF,OAAQuC,EAAEzG,YAAc0G,EAAE1G,aAAe2G,EACpC,GAAkB,SAAdzC,GACT,OAAOuC,EAAE9F,KAAKiG,cAAcF,EAAE/F,MAAQgG,EACjC,GAAkB,UAAdzC,GACT,OAAQuC,EAAE9G,MAAQ+G,EAAE/G,OAASgH,EACxB,GAAkB,mBAAdzC,GAAgC,CACzC,IAAI2C,EAAiBJ,EAAExF,uBAAyB,GAC5C6F,EAAiBJ,EAAEzF,uBAAyB,GAChD,OAAO4F,EAAeD,cAAcE,GAAkBH,EACjD,GAAkB,OAAdzC,GAAoB,CAK7B,OAHMuC,EAAE1G,GAAK0G,EAAEzG,YAET0G,EAAE3G,GAAK2G,EAAE1G,aACM2G,EAErB,OAAQF,EAAEtF,WAAauF,EAAEvF,YAAcwF,MAI/CxE,EAAe,QAhEbH,EAAsB,QAiEvB,CACDH,EACA+B,GACAI,GACAE,GACAE,GACAc,GACApB,KAGFnI,aAAgB,WACY,OAAtBoG,GACJG,EACEH,EAAkBgF,MAChBlH,KAAKmH,IAAI,EAxNG,GAwNAxG,GACZX,KAAKoH,IAzNO,GAyNHzG,EAzNG,GAyNiCuB,EAAkBrE,YAGlE,CAAC8C,EAAYuB,IA8QhB,OAAiCpG,WAAe,GAAhD,iCAQA,OAAiCA,WAAe,IAAhD,iCASA,IA1b2BuL,GA0bvB,GAAkCvL,WAAe,MAArD,qBAAKwL,GAAL,MAAmBC,GAAnB,MAEA,OACE,gCACE,eAACC,EAAA,EAAD,WACE,gCApiBM,uBAqiBN,sBACE1G,KAAK,cACL2G,QAAQ,qJAEV,sBACEC,SAAS,WACTD,QAAQ,wBACR,oBAAkB,SAEpB,sBACEC,SAAS,gBACTD,QAAQ,wBACR,oBAAkB,YAGrB3F,GACC,cAAC,EAAD,CACEN,QACE,+BACE,kEAEE,uBAFF,sBASR,cAAC,EAAD,CACEpF,QAAS4I,GACT7I,SAAU,kBAAM8I,IAAqB,IACrC3H,cAAeA,KAEjB,cAACqK,EAAA,EAAD,CACEC,KAAK,SACLpG,QAAS8F,GACTO,WAAY,WACVN,GAAgB,SAGpB,cAACO,EAAA,EAAD,CACEC,OAAO,EACPC,WAAW,EACXC,cAAc,EACdC,aAAa,EACbC,cAAc,EACdC,UAAU,EACVnJ,MAAM,SACNoJ,SAAS,mDAEX,sBAAKrN,UAAU,oBAAf,UACE,cAACsN,EAAA,EAAD,CAAeV,KAAK,WACpB,cAACW,EAAA,EAAD,CAAoBC,eAAe,aACnC,qBAAKxN,UAAU,+CACf,cAACF,EAAA,EAAD,KACEkH,GACA,eAACyG,EAAA,EAAD,CACExJ,MAAM,uBACNyJ,YAAY,iEAFd,UAKE,qBACE1N,UACE,kDACCyJ,IAAa,aAEhBpI,QAAS,kBA1jBrB,WACE,IAAIoI,GAAJ,CACA,IAAIkE,EAAY,IAAIC,KACpB7D,GAAc,IAAI6D,MAClBlH,EAAamH,aAAY,WACvBhE,GAAiB,IAAI+D,KAASD,KAC7B,KACHjE,IAAc,GAEd,IAAIoE,EAAY,GAEhBC,YAAK,oCAAqC,CAAEC,UAAW,UAAY,KAChEC,MAAK,SAACC,GACLJ,EAAYI,EACZH,YAAK,oCAAqC,CAAEC,UAAW,QAAU,KAC9DC,MAAK,SAACC,GACL,IAAIC,EAAQD,EACZC,EAAM9C,SAAQ,SAACzG,GACbA,EAAMkB,KAAOlB,EAAMkB,KAAO,UAC1BlB,EAAMC,QAAS,KAEjBuJ,MAAMpL,UAAUqL,KAAKlL,MAAM2K,EAAWK,GACtCG,aAAa5H,GACbmD,GAAiB,IAAI+D,KAASD,GAC9BjE,IAAc,GACdzC,EAAc6G,MAEfS,OAAM,WACLD,aAAa5H,GACbmD,GAAiB,IAAI+D,KAASD,GAC9BjE,IAAc,GACd6C,GAAgB,CACdtI,MAAO,sBACPuC,QACE,sEACFgI,KAAM,UACNC,YAAY,EACZC,cAAe,oCAItBH,OAAM,WACLD,aAAa5H,GACbmD,GAAiB,IAAI+D,KAASD,GAC9BjE,IAAc,GACd6C,GAAgB,CACdtI,MAAO,sBACPuC,QACE,sEACFgI,KAAM,UACNC,YAAY,EACZC,cAAe,kCAugBIC,IACfC,SAAUnF,GANZ,SAQGA,GAAY,iBAAmB,cAEjCA,IACC,qBACExJ,MAAO,CACLC,QAAS,OACTE,eAAgB,SAChBmF,WAAY,SACZpF,cAAe,SACfiC,IAAK,OANT,SASGuH,GACC,sBACE1J,MAAO,CACLC,QAAS,OACTE,eAAgB,SAChBmF,WAAY,SACZpF,cAAe,SACfiC,IAAK,OANT,UASE,oBACEnC,MAAO,CACL4O,OAAQ,mBACRvO,SAAU,SACVC,WAAY,SACZC,MAAO,qBALX,wBAQc,IACZ,sBAAMR,UAAU,aAAhB,SAA8B2J,KAThC,yBAYA,oBACE1J,MAAO,CACL4O,OAAQ,MACRvO,SAAU,SACVC,WAAY,SACZC,MAAO,qBALX,2BAQiB,IACf,sBAAMR,UAAU,aAAhB,SACGgF,KAAKC,MAAM2E,GAAe,OACrB,IAXV,SAauC,IAApC5E,KAAKC,MAAM2E,GAAe,KAAc,GAAK,UAIlD,8BACE,mBACE3J,MAAO,CACL2B,UAAW,OACXtB,SAAU,SACVC,WAAY,SACZC,MAAO,qBALX,kCAgBXwG,GACC,sBACEhH,UAAU,kBACVC,MAAO,CAAE4O,OAAQ,MAAOC,QAAS,OAFnC,UAIE,eAACrB,EAAA,EAAD,CACExJ,MAAM,gBACNyJ,YAAY,qDACZqB,QAAQ,EAHV,UAKE,sBACE/O,UAAU,2DACVC,MAAO,CACLI,MAAO,OACPH,QAAS,OACTC,cAAe,MACf6O,SAAU,OACV5M,IAAK,OACL6M,cAAe,QARnB,UAWE,uBACEC,QAAQ,YACRjP,MAAO,CACLK,SAAU,SACVuB,aAAc,OAJlB,yBASA,uBACE5B,MAAO,CACLkP,SAAU,QACV9O,MAAO,OACP+D,OAAQ,eAEVgL,KAAK,OACLtN,GAAG,YACHgE,KAAK,YACL9F,UAAU,oBACViC,SAAU,kBAjOxBqM,aAAa3H,QACbA,EAAyB0I,YAAW,WAClC,IAAIC,EAAYC,SAASC,eAAe,aAAaxN,MACrDgH,GAAoBsG,KACnB,SA+NS,uBACEJ,QAAQ,gBACRjP,MAAO,CACLK,SAAU,SACVuB,aAAc,OAJlB,6BASA,uBACE5B,MAAO,CACLkP,SAAU,QACV9O,MAAO,OACP+D,OAAQ,eAEVgL,KAAK,OACLtN,GAAG,gBACHgE,KAAK,gBACL9F,UAAU,oBACViC,SAAU,kBA7OxBqM,aAAa1H,QACbA,EAA6ByI,YAAW,WACtC,IAAII,EAAgBF,SAASC,eAAe,iBAAiBxN,MAC7DkH,GAAuBuG,KACtB,SA2OS,uBACEP,QAAQ,cACRjP,MAAO,CACLK,SAAU,SACVuB,aAAc,OAJlB,qCASA,uBACE5B,MAAO,CACLkP,SAAU,QACV9O,MAAO,OACP+D,OAAQ,eAEVgL,KAAK,OACLtN,GAAG,cACHgE,KAAK,cACL9F,UAAU,oBACViC,SAAU,kBAzPxBqM,aAAazH,QACbA,EAAqBwI,YAAW,WAC9B,IAAIK,EAAcH,SAASC,eAAe,eAAexN,MACzDoH,GAAgBsG,KACf,SAuPS,wBACEzP,MAAO,CACLK,SAAU,SACV2F,WAAY,QAHhB,UAME,uBACEjG,UAAU,cACV8F,KAAK,YACLsJ,KAAK,WACLO,QAAStF,GACTpI,SAAU,WACRqI,IAAkBD,OAZxB,gBAiBA,qBAAKrK,UAAU,oBAAf,SACE,oBAAGC,MAAO,CAAEK,SAAU,UAAtB,6BACmBwJ,GAAUY,WAD7B,WACiD,IAC9Cd,GAAe,IAFlB,qBAMJ,cAACgG,EAAD,CACEtK,KAAM8B,EACNyI,iBAAiB,EACjB3J,YAAa,SAACtB,GAAD,OAvvB3B,SAAqBA,GACnBqF,IAAqB,GACrBC,GAAiBtF,GAqvBmBsB,CAAYtB,IACpCc,gBAAiB,SAACd,GAAD,OA1gB/B,SAAmBA,GACjBmC,GAAa,GAEb,IAAI+I,EAAMlL,EAAMC,OAAS,GAAK,EAC1BkL,EAAOnL,EAAMC,OAAS,GAAK,GAE/BkJ,YACE,oCACA,CACEiC,QAASpL,EAAMoL,QACfC,aAAcH,EACdI,aAAcH,GAEhB,MACA9B,MAAK,SAACC,GAGN,IAEIiC,EAEAC,EADAjE,EAAM,EAENkE,EAAS,GACThE,EAAQ,EACR1D,EAAe,EACf2H,EAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5CpC,EAAI7C,SAAQ,SAACJ,GACXA,EAAMsF,MAAQ,IAAI3C,KAChB,IAAIA,KAAK3C,EAAMsF,OAAOC,UAAY,OAGhB,MAAlBL,GACAlF,EAAMsF,MAAMC,UAAYL,EAAeK,aAEvCL,EAAiBlF,EAAMsF,OAErBtF,EAAMwF,SAlBe,MAmBvB9H,KAEIsC,EAAMwF,SAAWtE,IAAKA,EAAMlB,EAAMwF,UACtCJ,EAAOhC,KAAKpD,EAAMwF,UAClBpE,GAASpB,EAAMwF,SACfH,EAAaI,IAAYjN,QAAQwH,EAAM0F,eAG3CvG,GAAqB+F,GAErB,IAAIS,EAAM5L,KAAKC,MAAM4L,YAAQR,GAAU,IACnCS,EAAM9L,KAAKC,MAAMoH,EAAQgE,EAAOxN,OAAS,IAE7CuN,EAAWjE,EAAM,GAIjB,IAHA,IAAI4E,EAAO,GACPC,EAAO,GACPC,EAAUjM,KAAKC,MAAMkH,EAAMiE,GACtBzN,EAAI,EAAGA,EAAIqC,KAAKoH,IAAIgE,EAAUU,EAAY,EAANF,GAAUjO,IACrDoO,EAAK1C,KAAK1L,EAAIsO,GACdD,EAAK3C,KAAK,GAEZH,EAAI7C,SAAQ,SAACJ,GACX8F,EAAK1F,SAAQ,SAAC6F,EAAKC,GACblG,EAAMwF,UAAYS,GAAOjG,EAAMwF,SAAWS,EAAMD,GAClDD,EAAKG,WAMX,IADA,IAAIC,EAAe,GAEbzO,EAAI,EACRA,EAAIqC,KAAKoH,IAAIgE,EAAUU,EAA0B,EAApB9L,KAAKoH,IAAI,GAAIwE,IAC1CjO,IAEAyO,EAAa/C,KAAK,CAChBgD,SAAUrM,KAAKC,OAAO8L,EAAKpO,GAAKsO,EAAU,GAAK,IAC/CK,UAAWN,EAAKrO,KAGpB6E,EACE4J,EAAalF,MAAMlH,KAAKmH,IAAI,EAAG2E,EAA0B,EAApB9L,KAAKoH,IAAI,GAAIwE,MAEpD9H,GAAclE,EAAMkB,MACpBsC,GAAsBwI,GACtBlI,GAAY1D,KAAKC,MAAY,GAAN6L,GAAY,IACnClI,GAAiBD,GACjBb,GAAc9C,KAAKC,MAAMoH,EAAQ,KACjCrE,GAAoBkG,EAAIrL,QAcxB,IAZA,IAAI0O,EAAkB,GAChBC,EAAS,CACb,qBACA,qBACA,qBACA,qBACA,qBACA,oBACA,qBACA,kBACA,qBAEO7O,EAAI,EAAGA,EAAI+N,IAAY7N,OAAQF,IACtC4O,EAAgBlD,KAAK,CACnBvM,GAAI4O,IAAY/N,GAChB8O,MAAOf,IAAY/N,GACnBnC,MAAOgR,EAAO7O,GACdX,MAAOsO,EAAa3N,KAGxB4O,EAAgBG,UAChBxJ,GAAmBqJ,GAMnB,IAJA,IAAII,EAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAChCC,EAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACrCC,EAAM,GACNC,EAAgB,GACXnP,EAAI,EAAGA,EAAIgP,EAAK9O,OAAQF,IAC/B,IAAK,IAAIoP,EAAO,EAAGA,EAAO,GAAIA,GAlGT,EAmGnBJ,EAAKhP,GAAG0L,KAAK0D,GACbH,EAAUjP,GAAG0L,KAAK,GACR,IAAN1L,IACFkP,EAAIxD,KAAK0D,GACTD,EAAczD,KAAK,IAIzBH,EAAI7C,SAAQ,SAACJ,GACX,IAAI+G,EAAM/G,EAAMsF,MAAM0B,SAClBF,EAAO9G,EAAMsF,MAAM2B,WACvBN,EAAUI,GAAKhN,KAAKmN,MAAMJ,EA9GL,MA+GrBD,EAAc9M,KAAKmN,MAAMJ,EA/GJ,SAkHvB,IADA,IAAIK,EAAe,GACV5N,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAI6N,EAAI,EAAGA,EAAI,GAAIA,GAnHH,EAoHnBD,EAAa/D,KAAK,CAChBiE,KAAU,GAAJ9N,EAAS6N,EACfE,UAAWX,EAAUpN,GAAGQ,KAAKmN,MAAME,EAtHlB,MA4HvB,IADA,IAAIG,EAAW,GACNH,EAAI,EAAGA,EAAI,GAAIA,GA5HD,EA6HrBG,EAASnE,KAAK,CACZiE,KAAMD,EACNE,UAAWT,EAAc9M,KAAKmN,MAAME,EA/HjB,MAmIvB7J,GAAYgK,GACZlK,GAAiB8J,GAGJlE,EAAIvC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE2E,MAAQ1E,EAAE0E,SAW5C,IAXA,IAIIkC,EAHAC,EAAkB,GAClBC,EAAuB,GACvBC,EAAY,EAEZC,EAAU,GAMLC,EAAM,EAAGA,EAAM5E,EAAIrL,OAAQiQ,IAAO,CACzC,IAAI7H,EAAQiD,EAAI4E,GACZC,EAAW9H,EAAMsF,MAAM1F,UACvBkI,IAAaF,IACC,KAAZA,GAEiB,eADFtI,GAAiBU,EAAMsF,SAEtCmC,EAAgBrE,KAAK,CACnB2E,EAAGzI,GAAiBU,EAAMsF,OAC1B0C,EAAGL,IAELD,EAAqBtE,KAAK,CACxB2E,EAAGzI,GAAiBU,EAAMsF,OAC1B0C,EAAGjO,KAAKC,MAAOwN,EAAoBG,EAAY,GAAM,KAAO,OAIlEH,EAAoB,EACpBG,EAAY,EACZC,EAAUE,GAEZN,GAAqBxH,EAAMwF,SAC3BmC,IAUFlL,EAPyB,CACvB,CACE5F,GAAI,aACJtB,MAAO,qBACP8E,KAAMoN,KAYV9K,GAPuB,CACrB,CACE9F,GAAI,WACJtB,MAAO,qBACP8E,KAAMqN,KAKV5L,GAAa,MA4TyBmM,CAAUtO,IACtCS,WAAW,EACXM,WAAYA,EACZC,SA7vBI,GA8vBJJ,WAAY,SAACvF,GACPoJ,KAAcpJ,EAEduJ,GADoB,cAAlBD,GACe,aAEA,cAGnBC,GAAiB,aACjBF,GAAcrJ,OAIpB,qBACEA,MAAO,CACLC,QAAS,OACTC,cAAe,MACfiC,IAAK,MACLhC,eAAgB,SAChBmF,WAAY,SACZyJ,SAAU,QAPd,SAUG9H,GACC,YACKkH,MAAMpJ,KAAKmO,KAAKjM,EAAkBrE,OAvxBrC,MAwxBA4C,KAAI,SAAC2N,EAAGzQ,GAAJ,OACJ,qBAEE3C,UACE2F,IAAehD,EACX,wBACA,iBAENtB,QAAS,WACPiG,EAAe3E,IARnB,SAWGA,EAAI,GAVAA,YAztBE0J,GAwuBEtE,GAvuBV,MAAbc,GAA0B,6BAE5BwD,GAAQ,KACRlE,GAAoB,KACpB,IAAIyF,MAAO4C,UAAYrG,GAAkBqG,UACvC,QAGA,cAAC/C,EAAA,EAAD,CACExJ,MACE,uBACEhE,MAAO,CACLC,QAAS,OACTC,cAAe,MACfoF,WAAY,UAJhB,UAOE,cAAC,IAAD,CACEtF,MAAO,CACLI,MAAO,OACP+D,OAAQ,OACRiP,YAAa,UAXnB,6BAiBFC,SAAS,eACT5F,YACE,gCACG,IAAIE,MAAO4C,UAAYrG,GAAkBqG,UACxC,SACA,oBAAIvQ,MAAO,CAAE4B,aAAc,QAA3B,kHAKDwK,GAAQ,KACP,qBAAIpM,MAAO,CAAE4B,aAAc,QAA3B,uBACawK,GAAQ,KAAO,QAAU,GADtC,8DAE0C,IACxC,sBAAMrM,UAAU,WAAhB,SACGqM,GAAQ,KAAO,oBAAsB,eAJ1C,OASDlE,GAAoB,IACnB,qBAAIlI,MAAO,CAAE4B,aAAc,QAA3B,8FAE0B,IACxB,sBAAM7B,UAAU,WAAhB,SACGmI,GAAoB,GACjB,oBACA,eANR,UAaN4G,QAAQ,IAKP,8BAsqBC,eAACtB,EAAA,EAAD,CACExJ,MACE,6DAC4B,IACzB4E,GACC,sBAAM7I,UAAU,aAAhB,SAA8B6I,KAE9B,yBAINyK,SAAS,wBACT5F,YAAY,GAZd,UAcE,oBACEzN,MAAO,CACLK,SAAU,QACVuB,aAAc,OAHlB,8BAMoB,IAClB,sBAAM7B,UAAU,aAAhB,SACe,OAAZyI,GAAA,UAAsBA,GAAtB,YAA0C,QACrC,IATV,wBAUwB,IACtB,sBAAMzI,UAAU,aAAhB,SACyB,OAAtBmI,GAAA,UACMA,GADN,YAEG,QACE,IAfV,uBAgBuB,IACrB,sBAAMnI,UAAU,aAAhB,SACoB,OAAjB2I,GAAA,UAA2BA,IAAiB,WAGjD,oBACE1I,MAAO,CACLK,SAAU,QACVuB,aAAc,OAHlB,iCAMuB,IACrB,sBAAM7B,UAAU,aAAhB,SACiB,OAAd6H,GAAA,UAAwBA,GAAxB,YAA8C,QACzC,IATV,uBAUuB,IACrB,sBAAM7H,UAAU,aAAhB,SACuB,OAApB+H,GAAA,UAA8BA,IAAoB,WAGvD,cAACwL,EAAA,EAAD,CACE/P,KAAM,CAAC,aACPgQ,QAAQ,WACRC,aAAa,qBACbC,WAAW,YACXpO,KAAMiC,EACNoM,eAAe,gCACfC,QAAQ,EACRC,YAAY,OAGhB,cAACpG,EAAA,EAAD,CACExJ,MACE,4DAC2B,IACxB4E,GACC,sBAAM7I,UAAU,aAAhB,SAA8B6I,KAE9B,yBAINyK,SAAS,uBACT5F,YAAY,2DAZd,SAcE,cAACoG,EAAA,EAAD,CACEtQ,KAAM,CAAC,aACPgQ,QAAQ,OACRC,aAAa,OACbC,WAAW,YACXpO,KAAMmC,EACNkM,eAAe,gCACfC,QAAQ,EACR3P,MAAM,uBACNpC,aAAc,IACdgS,YAAY,EAEZE,UAAU,UACVC,MAAM,aAGV,cAACvG,EAAA,EAAD,CACExJ,MACE,kEACiC,IAC9B4E,GACC,sBAAM7I,UAAU,aAAhB,SAA8B6I,KAE9B,yBAINyK,SAAS,6BACT5F,YAAY,yDAZd,SAcE,cAACoG,EAAA,EAAD,CACEtQ,KAAM,CAAC,aACPgQ,QAAQ,OACRC,aAAa,OACbC,WAAW,qBACXpO,KAAMqC,GACNgM,eAAe,gCACfC,QAAQ,EACR3P,MAAM,6BACNpC,aAAc,IACdgS,YAAY,EAEZE,UAAU,UACVC,MAAM,aAGV,cAACvG,EAAA,EAAD,CACExJ,MACE,sEACqC,IAClC4E,GACC,sBAAM7I,UAAU,aAAhB,SAA8B6I,KAE9B,yBAINyK,SAAS,iCACT5F,YAAY,yEAZd,SAcE,cAAC6F,EAAA,EAAD,CACE/P,KAAM,CAAC,aACPgQ,QAAQ,OACRC,aAAa,iDACbC,WAAW,YACXpO,KAAM+C,GACNsL,eAAe,gCACfC,QAAQ,EACRjC,MAAM,EACNkC,YAAY,MAGhB,cAACpG,EAAA,EAAD,CACExJ,MACE,qEACoC,IACjC4E,GACC,sBAAM7I,UAAU,aAAhB,SAA8B6I,KAE9B,yBAINyK,SAAS,uBACT5F,YAAY,wEAZd,SAcE,cAAC6F,EAAA,EAAD,CACE/P,KAAM,CAAC,aACPgQ,QAAQ,OACRC,aAAa,+BACbC,WAAW,YACXpO,KAAMiD,GACNoL,eAAe,gCACfC,QAAQ,EACRC,YAAY,MAGhB,cAACpG,EAAA,EAAD,CACExJ,MACE,4DAC2B,IACxB4E,GACC,sBAAM7I,UAAU,aAAhB,SAA8B6I,KAE9B,yBAINyK,SAAS,uBACT5F,YAAY,qDAZd,SAcE,cAACuG,EAAA,EAAD,CACE3O,KAAM2C,GACN0L,eAAe,gCACfC,QAAQ,EACRM,eAAe,EACfC,eAAe","file":"static/js/4.2f32664c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { ReactComponent as WarningSVG } from \"../../assets/global/warning.svg\";\r\n\r\nconst NoMobileOptimization = (props) => {\r\n  return (\r\n    <div\r\n      className=\"show-on-mobile\"\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"center\",\r\n        width: \"100%\",\r\n      }}\r\n    >\r\n      <p\r\n        style={{\r\n          fontSize: \"1.5rem\",\r\n          lineHeight: \"normal\",\r\n          color: \"var(--text-faded)\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        <WarningSVG style={{ verticalAlign: \"top\" }} />\r\n        This page is not optimized for mobile browsing.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoMobileOptimization;\r\n","var _path, _path2;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgSort(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    height: \"24px\",\n    viewBox: \"0 0 24 24\",\n    width: \"24px\",\n    fill: \"#FFFFFF\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 5.83L15.17 9l1.41-1.41L12 3 7.41 7.59 8.83 9 12 5.83zm0 12.34L8.83 15l-1.41 1.41L12 21l4.59-4.59L15.17 15 12 18.17z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSort);\nexport default __webpack_public_path__ + \"static/media/sort.69efd44c.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\r\nimport { ReactComponent as CloseSVG } from \"../../assets/global/close.svg\";\r\nimport { Submit } from \"../../services/CommunicationService\";\r\n\r\nconst ReportQuest = (props) => {\r\n  const [additionalText, setAdditionalText] = React.useState(\"\");\r\n\r\n  function submitForm() {\r\n    // console.log(props.reportedQuest);\r\n    Submit(\r\n      \"User reported a quest: \" + props.reportedQuest,\r\n      additionalText || \"No comment\"\r\n    );\r\n\r\n    close();\r\n  }\r\n\r\n  function close() {\r\n    setAdditionalText(\"\");\r\n    props.hideForm();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {props.visible && (\r\n        <div className=\"overlay\" onClick={() => props.hideForm()} />\r\n      )}\r\n      {props.visible && (\r\n        <div className=\"report-quest-form card\">\r\n          <CloseSVG\r\n            className=\"link-icon\"\r\n            style={{\r\n              position: \"absolute\",\r\n              top: \"5px\",\r\n              right: \"5px\",\r\n              cursor: \"pointer\",\r\n            }}\r\n            onClick={() => close()}\r\n          />\r\n          <h2 className=\"content-cluster-title\">Report Quest</h2>\r\n          <hr\r\n            style={{\r\n              backgroundColor: \"var(--text)\",\r\n              opacity: 0.2,\r\n              marginTop: \"0.5rem\",\r\n              marginBottom: \"0.5rem\",\r\n            }}\r\n          />\r\n          <p style={{ fontSize: \"1.3rem\" }}>\r\n            You're welcome to add any additional detail, but you can also just\r\n            click 'Submit' and I'll take a look for myself.\r\n          </p>\r\n          <input\r\n            id=\"additiona-text\"\r\n            placeholder=\"More details (optional)\"\r\n            style={{\r\n              width: \"100%\",\r\n              fontSize: \"1.2rem\",\r\n            }}\r\n            value={additionalText}\r\n            onChange={(e) => setAdditionalText(e.target.value)}\r\n          />\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"flex-end\",\r\n              gap: \"10px\",\r\n              marginTop: \"20px\",\r\n            }}\r\n          >\r\n            <div\r\n              className=\"secondary-button should-invert\"\r\n              onClick={() => close()}\r\n            >\r\n              Cancel\r\n            </div>\r\n            <div\r\n              className=\"primary-button should-invert\"\r\n              style={{ width: \"100px\", textAlign: \"center\" }}\r\n              onClick={() => submitForm()}\r\n            >\r\n              Submit\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReportQuest;\r\n","import React from \"react\";\r\nimport { ReactComponent as TimelineSVG } from \"../../assets/global/timeline.svg\";\r\nimport { ReactComponent as SortSVG } from \"../../assets/global/sort.svg\";\r\n\r\nconst ContentTable = (props) => {\r\n  const [filteredData, set_filteredData] = React.useState(null);\r\n\r\n  function generateLevelString(quest) {\r\n    return `${quest.CR_Heroic ? \"Heroic: \" + quest.CR_Heroic : \"\"}${\r\n      quest.CR_Heroic && quest.CR_Epic ? \" / \" : \"\"\r\n    }${quest.CR_Epic ? \"Epic: \" + quest.CR_Epic : \"\"}`;\r\n  }\r\n\r\n  function averageTimeString(sec) {\r\n    if (sec > 60) {\r\n      return `${Math.round((sec / 60) * 10) / 10} minutes`;\r\n    } else {\r\n      return `${sec} seconds`;\r\n    }\r\n  }\r\n\r\n  function questLevelString(quest) {\r\n    return `${!quest.isepic ? \"Heroic: \" + quest.level : \"\"}${\r\n      quest.isepic ? \"Epic: \" + quest.level : \"\"\r\n    }`;\r\n  }\r\n\r\n  function questXpPerMinuteString(quest) {\r\n    return `${\r\n      !quest.isepic\r\n        ? \"HE: \" + Math.round(quest.xp / (quest.averagetime / 60))\r\n        : \"\"\r\n    }${\r\n      quest.isepic\r\n        ? \"EE: \" + Math.round(quest.xp / (quest.averagetime / 60))\r\n        : \"\"\r\n    }`;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        className={\"content-table-container\"}\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          height: \"min-content\",\r\n          maxHeight: props.collapsed ? \"300px\" : \"\",\r\n        }}\r\n      >\r\n        {props.data === null ? (\r\n          <div\r\n            className=\"loading-data-message\"\r\n            style={{\r\n              height: \"300px\",\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <h4>Running audit. Please wait...</h4>\r\n          </div>\r\n        ) : (\r\n          <table className=\"content-table\">\r\n            <thead>\r\n              <tr>\r\n                <th></th>\r\n                <th\r\n                  onClick={() => props.handleSort(\"name\")}\r\n                  style={{\r\n                    cursor: \"pointer\",\r\n                    // display: \"flex\",\r\n                    // flexDirection: \"row\",\r\n                    // alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  Quest <SortSVG className=\"nav-icon should-invert\" />\r\n                </th>\r\n                <th\r\n                  onClick={() => props.handleSort(\"level\")}\r\n                  style={{\r\n                    cursor: \"pointer\",\r\n                    // display: \"flex\",\r\n                    // flexDirection: \"row\",\r\n                    // alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  Level <SortSVG className=\"nav-icon should-invert\" />\r\n                </th>\r\n                <th\r\n                  onClick={() => props.handleSort(\"adventure pack\")}\r\n                  style={{\r\n                    cursor: \"pointer\",\r\n                    // display: \"flex\",\r\n                    // flexDirection: \"row\",\r\n                    // alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  Adventure Pack <SortSVG className=\"nav-icon should-invert\" />\r\n                </th>\r\n                <th\r\n                  onClick={() => props.handleSort(\"xp\")}\r\n                  style={{\r\n                    cursor: \"pointer\",\r\n                    // display: \"flex\",\r\n                    // flexDirection: \"row\",\r\n                    // alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  XP/Min <SortSVG className=\"nav-icon should-invert\" />\r\n                </th>\r\n                <th\r\n                  onClick={() => props.handleSort(\"duration\")}\r\n                  style={{\r\n                    cursor: \"pointer\",\r\n                    // display: \"flex\",\r\n                    // flexDirection: \"row\",\r\n                    // alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  Average Duration{\" \"}\r\n                  <SortSVG className=\"nav-icon should-invert\" />\r\n                </th>\r\n                <th\r\n                  onClick={() => props.handleSort(\"instances\")}\r\n                  style={{\r\n                    cursor: \"pointer\",\r\n                    // display: \"flex\",\r\n                    // flexDirection: \"row\",\r\n                    // alignItems: \"center\",\r\n                  }}\r\n                >\r\n                  Instances <SortSVG className=\"nav-icon should-invert\" />\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {props.data.map((quest, i) => (\r\n                <tr\r\n                  className=\"content-table-row-highlight\"\r\n                  key={quest.name}\r\n                  onClick={() => {\r\n                    props.handleSelection(quest);\r\n                  }}\r\n                >\r\n                  <td>{i + 1 + props.pageNumber * props.pageSize}</td>\r\n                  <td\r\n                    style={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"row\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        cursor: \"pointer\",\r\n                        textDecoration: \"underline\",\r\n                        width: \"max-content\",\r\n                      }}\r\n                    >\r\n                      {quest.name}\r\n                    </div>\r\n                    {quest.groupsize === \"Raid\" && (\r\n                      <span\r\n                        style={{\r\n                          fontWeight: \"bold\",\r\n                          color: \"red\",\r\n                          marginLeft: \"5px\",\r\n                          opacity: 0.8,\r\n                        }}\r\n                      >\r\n                        R\r\n                      </span>\r\n                    )}\r\n                    <div\r\n                      className=\"report-quest-button\"\r\n                      onClick={(e) => {\r\n                        props.reportQuest(quest.name);\r\n                        e.stopPropagation();\r\n                      }}\r\n                    >\r\n                      Report\r\n                    </div>\r\n                  </td>\r\n                  <td>{questLevelString(quest)}</td>\r\n                  <td>{quest.requiredadventurepack || \"\"}</td>\r\n                  <td>{questXpPerMinuteString(quest)}</td>\r\n                  <td>{averageTimeString(quest.averagetime)}</td>\r\n                  <td>{quest.datapoints}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContentTable;\r\n","import React from \"react\";\r\n\r\nconst LoadingOverlay = (props) => {\r\n  return (\r\n    <div className=\"loading-overlay\">\r\n      <span>{props.message || \"Loading data. Please wait...\"}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingOverlay;\r\n","import * as React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n// import Card from \"../old_Card\";\r\n// import ReportIssueForm from \"../global/ReportIssueForm\";\r\nimport ReportQuest from \"./ReportQuest\";\r\nimport ChartPie from \"../global/ChartPie\";\r\nimport Banner from \"../global/Banner\";\r\n// import ChartTimeOfDay from \"../ChartTimeOfDay\";\r\n// import ChartDayOfWeek from \"../ChartDayOfWeek\";\r\n// import ChartClassDistribution from \"../ChartClassDistribution\";\r\n// import ChartLevelDistribution from \"../ChartLevelDistribution\";\r\n// import ServerStatusDisplay from \"./ServerStatusDisplay\";\r\nimport ChartLine from \"../global/ChartLine\";\r\nimport QuestTable from \"./QuestTable\";\r\nimport PopupMessage from \"../global/PopupMessage\";\r\nimport ChartBar from \"../global/ChartBar\";\r\nimport { Post } from \"../../services/DataLoader\";\r\nimport { ReactComponent as WarningSVG } from \"../../assets/global/warning.svg\";\r\nimport NoMobileOptimization from \"../global/NoMobileOptimization\";\r\nimport BannerMessage from \"../global/BannerMessage\";\r\nimport LoadingOverlay from \"./LoadingOverlay\";\r\nimport ContentCluster from \"../global/ContentCluster\";\r\nimport { SERVER_LIST } from \"../../constants/Servers\";\r\nimport { std as mathStd } from \"mathjs\";\r\nimport DataClassification from \"../global/DataClassification\";\r\n\r\nconst TITLE = \"DDO Quest Activity\";\r\n\r\nconst Quests = (props) => {\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [questList, set_questList] = React.useState(null);\r\n  const [filteredQuestList, set_filteredQuestList] = React.useState(null);\r\n  const [paginatedQuestList, set_paginatedQuestList] = React.useState(null);\r\n  const [pageNumber, set_pageNumber] = React.useState(-1);\r\n  // const [questData, set_questData] = React.useState(null);\r\n  const [durationData, set_durationData] = React.useState(null);\r\n  const [popularityOverTimeData, set_popularityOverTimeData] =\r\n    React.useState(null);\r\n  const [durationOverTimeData, set_durationOverTimeData] = React.useState(null);\r\n  const [totalTime, set_totalTime] = React.useState(null);\r\n  const [totalDataPoints, set_totalDataPoints] = React.useState(null);\r\n  const [serverDistData, set_serverDistData] = React.useState(null);\r\n  const [standardDeviation, set_standardDeviation] = React.useState(null);\r\n  const [datetimeData, set_datetimeData] = React.useState(null);\r\n  const [todData, set_todData] = React.useState(null);\r\n  const [average, set_average] = React.useState(null);\r\n  const [outlierCount, set_outlierCount] = React.useState(null);\r\n  const [questName, set_questName] = React.useState(null);\r\n  const [questNameFilter, set_questNameFilter] = React.useState(\"\");\r\n  const [adventurePackFilter, setAdventurePackFilter] = React.useState(\"\");\r\n  const [levelFilter, set_levelFilter] = React.useState(\"\");\r\n  const [sortStyle, set_sortStyle] = React.useState(\"instances\");\r\n  const [sortDirection, setSortDirection] = React.useState(\"descending\");\r\n  const [isRunning, set_isRunning] = React.useState(false);\r\n  const [tableSize, set_tableSize] = React.useState(null);\r\n  const [ellapsedTime, set_ellapsedTime] = React.useState(0);\r\n  const [startTime, set_startTime] = React.useState(null);\r\n  const [reportFormVisible, setReportFormVisible] = React.useState(false);\r\n  const [reportedQuest, setReportedQuest] = React.useState(null);\r\n  const [earliestEntryDate, setEarliestEntryDate] = React.useState(null);\r\n  const [showRaidsOnly, setShowRaidsOnly] = React.useState(false);\r\n\r\n  const PAGE_SIZE = 20;\r\n\r\n  function reportQuest(quest) {\r\n    setReportFormVisible(true);\r\n    setReportedQuest(quest);\r\n  }\r\n\r\n  // Fetch the data on page load\r\n  let updateTime;\r\n  function runAudit() {\r\n    if (isRunning) return;\r\n    let starttime = new Date();\r\n    set_startTime(new Date());\r\n    updateTime = setInterval(() => {\r\n      set_ellapsedTime(new Date() - starttime);\r\n    }, 1000);\r\n    set_isRunning(true);\r\n\r\n    let questlist = [];\r\n\r\n    Post(\"https://api.ddoaudit.com/activity\", { questtype: \"heroic\" }, 30000)\r\n      .then((val) => {\r\n        questlist = val;\r\n        Post(\"https://api.ddoaudit.com/activity\", { questtype: \"epic\" }, 30000)\r\n          .then((val) => {\r\n            let epics = val;\r\n            epics.forEach((quest) => {\r\n              quest.name = quest.name + \" (Epic)\";\r\n              quest.isepic = true;\r\n            });\r\n            Array.prototype.push.apply(questlist, epics);\r\n            clearTimeout(updateTime);\r\n            set_ellapsedTime(new Date() - starttime);\r\n            set_isRunning(false);\r\n            set_questList(questlist);\r\n          })\r\n          .catch(() => {\r\n            clearTimeout(updateTime);\r\n            set_ellapsedTime(new Date() - starttime);\r\n            set_isRunning(false);\r\n            setPopupMessage({\r\n              title: \"Failed to run audit\",\r\n              message:\r\n                \"The report timed out. You can refresh the page or report the issue.\",\r\n              icon: \"warning\",\r\n              fullscreen: false,\r\n              reportMessage: \"Activity report timed out\",\r\n            });\r\n          });\r\n      })\r\n      .catch(() => {\r\n        clearTimeout(updateTime);\r\n        set_ellapsedTime(new Date() - starttime);\r\n        set_isRunning(false);\r\n        setPopupMessage({\r\n          title: \"Failed to run audit\",\r\n          message:\r\n            \"The report timed out. You can refresh the page or report the issue.\",\r\n          icon: \"warning\",\r\n          fullscreen: false,\r\n          reportMessage: \"Activity report timed out\",\r\n        });\r\n      });\r\n  }\r\n\r\n  function getWarningMessage(total) {\r\n    if (questName == null) return <></>;\r\n    if (\r\n      total < 3000 ||\r\n      standardDeviation > 17 ||\r\n      new Date().getTime() - earliestEntryDate.getTime() <\r\n        1000 * 60 * 60 * 24 * 21\r\n    ) {\r\n      return (\r\n        <ContentCluster\r\n          title={\r\n            <span\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <WarningSVG\r\n                style={{\r\n                  width: \"30px\",\r\n                  height: \"30px\",\r\n                  marginRight: \"10px\",\r\n                }}\r\n              />\r\n              Unreliable Data Warning\r\n            </span>\r\n          }\r\n          altTitle=\"Data warning\"\r\n          description={\r\n            <ul>\r\n              {new Date().getTime() - earliestEntryDate.getTime() <\r\n                1000 * 60 * 60 * 24 * 21 && (\r\n                <li style={{ marginBottom: \"10px\" }}>\r\n                  Either this is a new quest or we recently started tracking it.\r\n                  Please be patient as we collect data.\r\n                </li>\r\n              )}\r\n              {total < 3000 && (\r\n                <li style={{ marginBottom: \"10px\" }}>\r\n                  There are {total < 1500 ? \"very \" : \"\"}few data points for\r\n                  this quest. The provided reports may be{\" \"}\r\n                  <span className=\"red-text\">\r\n                    {total < 1500 ? \"highly unreliable\" : \"unreliable\"}\r\n                  </span>\r\n                  .\r\n                </li>\r\n              )}\r\n              {standardDeviation > 17 && (\r\n                <li style={{ marginBottom: \"10px\" }}>\r\n                  The standard deviation for this dataset is very high. The\r\n                  provided reports may be{\" \"}\r\n                  <span className=\"red-text\">\r\n                    {standardDeviation > 30\r\n                      ? \"highly unreliable\"\r\n                      : \"unreliable\"}\r\n                  </span>\r\n                  .\r\n                </li>\r\n              )}\r\n            </ul>\r\n          }\r\n          noFade={true}\r\n        />\r\n      );\r\n    }\r\n\r\n    return <></>;\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (questList === null) {\r\n      set_filteredQuestList(null);\r\n      return;\r\n    }\r\n    let levelFilters = levelFilter.split(\",\");\r\n    set_filteredQuestList(\r\n      questList\r\n        .filter((entry) => (showRaidsOnly ? entry.groupsize === \"Raid\" : true))\r\n        .filter((entry) =>\r\n          entry.name.toLowerCase().includes(questNameFilter.toLowerCase())\r\n        )\r\n        .filter((entry) =>\r\n          entry.requiredadventurepack\r\n            ?.toLowerCase()\r\n            .includes(adventurePackFilter.toLowerCase())\r\n        )\r\n        .filter((entry) => {\r\n          if (levelFilter === \"\") return true;\r\n          let valid = false;\r\n          levelFilters.forEach((f) => {\r\n            if (!isNaN(f)) {\r\n              if (entry.level === parseInt(f)) {\r\n                valid = true;\r\n              }\r\n            } else {\r\n              if (f.split(\"-\").length !== 2) {\r\n                valid = false;\r\n                return;\r\n              }\r\n              let lower = f.split(\"-\")[0];\r\n              let upper = f.split(\"-\")[1];\r\n              if (\r\n                entry.level <= parseInt(upper) &&\r\n                entry.level >= parseInt(lower)\r\n              ) {\r\n                valid = true;\r\n              }\r\n            }\r\n          });\r\n          return valid;\r\n        })\r\n        .sort(function (a, b) {\r\n          let sortmod = 1;\r\n          if (sortDirection === \"descending\") sortmod = -1;\r\n          if (sortStyle === \"duration\") {\r\n            return (a.averagetime - b.averagetime) * sortmod;\r\n          } else if (sortStyle === \"name\") {\r\n            return a.name.localeCompare(b.name) * sortmod;\r\n          } else if (sortStyle === \"level\") {\r\n            return (a.level - b.level) * sortmod;\r\n          } else if (sortStyle === \"adventure pack\") {\r\n            let aadventurepack = a.requiredadventurepack || \"\";\r\n            let badventurepack = b.requiredadventurepack || \"\";\r\n            return aadventurepack.localeCompare(badventurepack) * sortmod;\r\n          } else if (sortStyle === \"xp\") {\r\n            let axp = 0;\r\n            axp = a.xp / a.averagetime;\r\n            let bxp = 0;\r\n            bxp = b.xp / b.averagetime;\r\n            return (axp - bxp) * sortmod;\r\n          } else {\r\n            return (a.datapoints - b.datapoints) * sortmod;\r\n          }\r\n        })\r\n    );\r\n    set_pageNumber(0);\r\n  }, [\r\n    questList,\r\n    questNameFilter,\r\n    levelFilter,\r\n    sortStyle,\r\n    sortDirection,\r\n    showRaidsOnly,\r\n    adventurePackFilter,\r\n  ]);\r\n\r\n  React.useEffect(() => {\r\n    if (filteredQuestList === null) return;\r\n    set_paginatedQuestList(\r\n      filteredQuestList.slice(\r\n        Math.max(0, pageNumber * PAGE_SIZE),\r\n        Math.min(pageNumber * PAGE_SIZE + PAGE_SIZE, filteredQuestList.length)\r\n      )\r\n    );\r\n  }, [pageNumber, filteredQuestList]);\r\n\r\n  function dateToDateString(dt) {\r\n    return `${dt.getFullYear().toString()}-${(dt.getMonth() + 1)\r\n      .toString()\r\n      .padStart(2, \"0\")}-${dt.getDate().toString().padStart(2, \"0\")}`;\r\n  }\r\n\r\n  function dateToTimeString(dt) {\r\n    return `${dt.getFullYear().toString()}-${(dt.getMonth() + 1)\r\n      .toString()\r\n      .padStart(2, \"0\")}-${dt.getDate().toString().padStart(2, \"0\")} ${dt\r\n      .getHours()\r\n      .toString()\r\n      .padStart(2, \"0\")}:${dt.getMinutes().toString().padStart(2, \"0\")}:${dt\r\n      .getSeconds()\r\n      .toString()\r\n      .padStart(2, \"0\")}`;\r\n  }\r\n\r\n  function loadQuest(quest) {\r\n    setIsLoading(true);\r\n\r\n    let low = quest.isepic ? 20 : 1;\r\n    let high = quest.isepic ? 40 : 20;\r\n\r\n    Post(\r\n      \"https://api.ddoaudit.com/activity\",\r\n      {\r\n        questid: quest.questid,\r\n        minimumlevel: low,\r\n        maximumlevel: high,\r\n      },\r\n      15000\r\n    ).then((val) => {\r\n      // console.log(val);\r\n\r\n      const HOUR_BIN_WIDTH = 2;\r\n      const MAX_DURATION_LIMIT = 3 * 60 * 60;\r\n      let firstentrydate;\r\n      let max = 0;\r\n      let bincount = 30;\r\n      let values = [];\r\n      let total = 0;\r\n      let outlierCount = 0;\r\n      let servercounts = [0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n      val.forEach((entry) => {\r\n        entry.start = new Date(\r\n          new Date(entry.start).getTime() - 5 * 60 * 60 * 1000\r\n        );\r\n        if (\r\n          firstentrydate == null ||\r\n          entry.start.getTime() < firstentrydate.getTime()\r\n        ) {\r\n          firstentrydate = entry.start;\r\n        }\r\n        if (entry.duration > MAX_DURATION_LIMIT) {\r\n          outlierCount++;\r\n        } else {\r\n          if (entry.duration > max) max = entry.duration;\r\n          values.push(entry.duration);\r\n          total += entry.duration;\r\n          servercounts[SERVER_LIST.indexOf(entry.server)]++;\r\n        }\r\n      });\r\n      setEarliestEntryDate(firstentrydate);\r\n\r\n      let std = Math.round(mathStd(values) / 60);\r\n      let ave = Math.round(total / values.length / 60);\r\n\r\n      bincount = max / 60;\r\n      let bins = [];\r\n      let freq = [];\r\n      let binstep = Math.round(max / bincount);\r\n      for (let i = 0; i < Math.min(bincount, ave + std * 2); i++) {\r\n        bins.push(i * binstep);\r\n        freq.push(0);\r\n      }\r\n      val.forEach((entry) => {\r\n        bins.forEach((bin, index) => {\r\n          if (entry.duration >= bin && entry.duration < bin + binstep) {\r\n            freq[index]++;\r\n          }\r\n        });\r\n      });\r\n\r\n      let durationdata = [];\r\n      for (\r\n        let i = 0;\r\n        i < Math.min(bincount, ave + Math.min(20, std) * 2);\r\n        i++\r\n      ) {\r\n        durationdata.push({\r\n          Duration: Math.round((bins[i] + binstep / 2) / 60),\r\n          Frequency: freq[i],\r\n        });\r\n      }\r\n      set_durationData(\r\n        durationdata.slice(Math.max(0, ave - Math.min(20, std) * 2))\r\n      );\r\n      set_questName(quest.name);\r\n      set_standardDeviation(std);\r\n      set_average(Math.round(ave * 10) / 10);\r\n      set_outlierCount(outlierCount);\r\n      set_totalTime(Math.round(total / 60));\r\n      set_totalDataPoints(val.length);\r\n\r\n      let serverdistrdata = [];\r\n      const COLORS = [\r\n        \"hsl(205, 70%, 41%)\",\r\n        \"hsl(28, 100%, 53%)\",\r\n        \"hsl(120, 57%, 40%)\",\r\n        \"hsl(360, 69%, 50%)\",\r\n        \"hsl(271, 39%, 57%)\",\r\n        \"hsl(10, 30%, 42%)\",\r\n        \"hsl(318, 66%, 68%)\",\r\n        \"hsl(0, 0%, 50%)\",\r\n        \"hsl(60, 70%, 44%)\",\r\n      ];\r\n      for (let i = 0; i < SERVER_LIST.length; i++) {\r\n        serverdistrdata.push({\r\n          id: SERVER_LIST[i],\r\n          label: SERVER_LIST[i],\r\n          color: COLORS[i],\r\n          value: servercounts[i],\r\n        });\r\n      }\r\n      serverdistrdata.reverse();\r\n      set_serverDistData(serverdistrdata);\r\n\r\n      let days = [[], [], [], [], [], [], []];\r\n      let instances = [[], [], [], [], [], [], []];\r\n      let tod = [];\r\n      let tod_instances = [];\r\n      for (let i = 0; i < days.length; i++) {\r\n        for (let hour = 0; hour < 24; hour += HOUR_BIN_WIDTH) {\r\n          days[i].push(hour);\r\n          instances[i].push(0);\r\n          if (i === 0) {\r\n            tod.push(hour);\r\n            tod_instances.push(0);\r\n          }\r\n        }\r\n      }\r\n      val.forEach((entry) => {\r\n        let dow = entry.start.getDay();\r\n        let hour = entry.start.getHours();\r\n        instances[dow][Math.floor(hour / HOUR_BIN_WIDTH)]++;\r\n        tod_instances[Math.floor(hour / HOUR_BIN_WIDTH)]++;\r\n      });\r\n      let datetimedata = [];\r\n      for (let d = 0; d < 7; d++) {\r\n        for (let h = 0; h < 24; h += HOUR_BIN_WIDTH) {\r\n          datetimedata.push({\r\n            Time: d * 24 + h,\r\n            Instances: instances[d][Math.floor(h / HOUR_BIN_WIDTH)],\r\n          });\r\n        }\r\n      }\r\n\r\n      let tod_data = [];\r\n      for (let h = 0; h < 24; h += HOUR_BIN_WIDTH) {\r\n        tod_data.push({\r\n          Time: h,\r\n          Instances: tod_instances[Math.floor(h / HOUR_BIN_WIDTH)],\r\n        });\r\n      }\r\n\r\n      set_todData(tod_data);\r\n      set_datetimeData(datetimedata);\r\n\r\n      // popularity over time\r\n      let sorted = val.sort((a, b) => a.start > b.start);\r\n      let dailypopularity = [];\r\n      let dailyaverageduration = [];\r\n      let thiscount = 0;\r\n      let thistotalduration;\r\n      let thisday = \"\";\r\n\r\n      let scalefactor = 1;\r\n      let maxdaily;\r\n      let mindaily;\r\n\r\n      for (let ent = 0; ent < val.length; ent++) {\r\n        let entry = val[ent];\r\n        let entryday = entry.start.getDate();\r\n        if (entryday !== thisday) {\r\n          if (thisday !== \"\") {\r\n            let datestring = dateToDateString(entry.start);\r\n            if (datestring !== \"2022-01-07\") {\r\n              dailypopularity.push({\r\n                x: dateToDateString(entry.start),\r\n                y: thiscount,\r\n              });\r\n              dailyaverageduration.push({\r\n                x: dateToDateString(entry.start),\r\n                y: Math.round((thistotalduration / thiscount / 60) * 100) / 100,\r\n              });\r\n            }\r\n          }\r\n          thistotalduration = 0;\r\n          thiscount = 0;\r\n          thisday = entryday;\r\n        }\r\n        thistotalduration += entry.duration;\r\n        thiscount++;\r\n      }\r\n\r\n      let lineDataPopularity = [\r\n        {\r\n          id: \"Popularity\",\r\n          color: \"hsl(180, 70%, 50%)\",\r\n          data: dailypopularity,\r\n        },\r\n      ];\r\n      set_popularityOverTimeData(lineDataPopularity);\r\n\r\n      let lineDataDuration = [\r\n        {\r\n          id: \"Duration\",\r\n          color: \"hsl(180, 70%, 50%)\",\r\n          data: dailyaverageduration,\r\n        },\r\n      ];\r\n      set_durationOverTimeData(lineDataDuration);\r\n\r\n      setIsLoading(false);\r\n    });\r\n  }\r\n\r\n  // Download quest data\r\n  function download(data) {\r\n    let output = JSON.stringify(data, null, 4);\r\n\r\n    const blob = new Blob([output]);\r\n    const fileDownloadUrl = URL.createObjectURL(blob);\r\n    this.setState({ fileDownloadUrl: fileDownloadUrl }, () => {\r\n      this.dofileDownload.click();\r\n      URL.revokeObjectURL(fileDownloadUrl); // free up storage--no longer needed.\r\n      this.setState({ fileDownloadUrl: \"\" });\r\n    });\r\n  }\r\n\r\n  let questnamefiltertimeout;\r\n  function HandleQuestNameFilter() {\r\n    clearTimeout(questnamefiltertimeout);\r\n    questnamefiltertimeout = setTimeout(() => {\r\n      let questname = document.getElementById(\"questname\").value;\r\n      set_questNameFilter(questname);\r\n    }, 500);\r\n  }\r\n\r\n  let adventurepackfiltertimeout;\r\n  function HandleAdventurePackFilter() {\r\n    clearTimeout(adventurepackfiltertimeout);\r\n    adventurepackfiltertimeout = setTimeout(() => {\r\n      let adventurepack = document.getElementById(\"adventurepack\").value;\r\n      setAdventurePackFilter(adventurepack);\r\n    }, 500);\r\n  }\r\n\r\n  let levelfiltertimeout;\r\n  function HandleLevelFilter() {\r\n    clearTimeout(levelfiltertimeout);\r\n    levelfiltertimeout = setTimeout(() => {\r\n      let levelfilter = document.getElementById(\"levelfilter\").value;\r\n      set_levelFilter(levelfilter);\r\n    }, 500);\r\n  }\r\n\r\n  const [minLevel, set_minLevel] = React.useState(1);\r\n  function HandleMinimumLevelFilter() {\r\n    let minlevel = document.getElementById(\"minlevel\").value;\r\n    if (!isNaN(minlevel)) {\r\n      set_minLevel(minlevel);\r\n    }\r\n  }\r\n\r\n  const [maxLevel, set_maxLevel] = React.useState(30);\r\n  function HandleMaximumLevelFilter() {\r\n    let maxlevel = document.getElementById(\"maxlevel\").value;\r\n    if (!isNaN(maxlevel)) {\r\n      set_maxLevel(maxlevel);\r\n    }\r\n  }\r\n\r\n  // Popup message\r\n  var [popupMessage, setPopupMessage] = React.useState(null);\r\n\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>{TITLE}</title>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Check quest activity, duration, and popularity. See how long each quest takes to run, quest popularity over time, and XP per minute estimations!\"\r\n        />\r\n        <meta\r\n          property=\"og:image\"\r\n          content=\"/icons/logo-512px.png\"\r\n          data-react-helmet=\"true\"\r\n        />\r\n        <meta\r\n          property=\"twitter:image\"\r\n          content=\"/icons/logo-512px.png\"\r\n          data-react-helmet=\"true\"\r\n        />\r\n      </Helmet>\r\n      {isLoading && (\r\n        <LoadingOverlay\r\n          message={\r\n            <span>\r\n              <center>\r\n                Loading data. Please wait...\r\n                <br />\r\n                Scroll down.\r\n              </center>\r\n            </span>\r\n          }\r\n        />\r\n      )}\r\n      <ReportQuest\r\n        visible={reportFormVisible}\r\n        hideForm={() => setReportFormVisible(false)}\r\n        reportedQuest={reportedQuest}\r\n      />\r\n      <PopupMessage\r\n        page=\"quests\"\r\n        message={popupMessage}\r\n        popMessage={() => {\r\n          setPopupMessage(null);\r\n        }}\r\n      />\r\n      <Banner\r\n        small={true}\r\n        showTitle={true}\r\n        showSubtitle={true}\r\n        showButtons={false}\r\n        hideOnMobile={true}\r\n        hideVote={true}\r\n        title=\"Quests\"\r\n        subtitle=\"Quest Popularity, Average Duration, and XP/min\"\r\n      />\r\n      <div className=\"content-container\">\r\n        <BannerMessage page=\"quests\" />\r\n        <DataClassification classification=\"inferred\" />\r\n        <div className=\"top-content-padding-small shrink-on-mobile\" />\r\n        <NoMobileOptimization />\r\n        {!questList && (\r\n          <ContentCluster\r\n            title=\"Quest Activity Audit\"\r\n            description=\"Run a new Quest Activity Audit by pressing the\r\n                    button below.\"\r\n          >\r\n            <div\r\n              className={\r\n                \"primary-button should-invert full-width-mobile\" +\r\n                (isRunning && \" disabled\")\r\n              }\r\n              onClick={() => runAudit()}\r\n              disabled={isRunning}\r\n            >\r\n              {isRunning ? \"Please wait...\" : \"Run Audit\"}\r\n            </div>\r\n            {isRunning && (\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                  flexDirection: \"column\",\r\n                  gap: \"5px\",\r\n                }}\r\n              >\r\n                {tableSize ? (\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      justifyContent: \"center\",\r\n                      alignItems: \"center\",\r\n                      flexDirection: \"column\",\r\n                      gap: \"5px\",\r\n                    }}\r\n                  >\r\n                    <p\r\n                      style={{\r\n                        margin: \"10px 0px 0px 0px\",\r\n                        fontSize: \"1.5rem\",\r\n                        lineHeight: \"normal\",\r\n                        color: \"var(--text-faded)\",\r\n                      }}\r\n                    >\r\n                      Summarizing{\" \"}\r\n                      <span className=\"lfm-number\">{tableSize}</span> unique\r\n                      data points\r\n                    </p>\r\n                    <p\r\n                      style={{\r\n                        margin: \"0px\",\r\n                        fontSize: \"1.5rem\",\r\n                        lineHeight: \"normal\",\r\n                        color: \"var(--text-faded)\",\r\n                      }}\r\n                    >\r\n                      Ellapsed time:{\" \"}\r\n                      <span className=\"lfm-number\">\r\n                        {Math.round(ellapsedTime / 1000)}\r\n                      </span>{\" \"}\r\n                      second\r\n                      {Math.round(ellapsedTime / 1000) === 1 ? \"\" : \"s\"}\r\n                    </p>\r\n                  </div>\r\n                ) : (\r\n                  <div>\r\n                    <p\r\n                      style={{\r\n                        marginTop: \"10px\",\r\n                        fontSize: \"1.5rem\",\r\n                        lineHeight: \"normal\",\r\n                        color: \"var(--text-faded)\",\r\n                      }}\r\n                    >\r\n                      Connecting...\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </ContentCluster>\r\n        )}\r\n        {questList && (\r\n          <div\r\n            className=\"content-cluster\"\r\n            style={{ margin: \"0px\", padding: \"0px\" }}\r\n          >\r\n            <ContentCluster\r\n              title=\"Audit Results\"\r\n              description=\"Click on a quest and scroll down for more details.\"\r\n              noFade={true}\r\n            >\r\n              <div\r\n                className=\"player-filter-input column-on-mobile small-gap-on-mobile\"\r\n                style={{\r\n                  width: \"100%\",\r\n                  display: \"flex\",\r\n                  flexDirection: \"row\",\r\n                  flexWrap: \"wrap\",\r\n                  gap: \"10px\",\r\n                  paddingBottom: \"10px\",\r\n                }}\r\n              >\r\n                <label\r\n                  htmlFor=\"questname\"\r\n                  style={{\r\n                    fontSize: \"1.2rem\",\r\n                    marginBottom: \"0px\",\r\n                  }}\r\n                >\r\n                  Quest name:\r\n                </label>\r\n                <input\r\n                  style={{\r\n                    maxWidth: \"175px\",\r\n                    width: \"100%\",\r\n                    height: \"max-content\",\r\n                  }}\r\n                  type=\"text\"\r\n                  id=\"questname\"\r\n                  name=\"questname\"\r\n                  className=\"full-width-mobile\"\r\n                  onChange={() => HandleQuestNameFilter()}\r\n                />\r\n                <label\r\n                  htmlFor=\"adventurepack\"\r\n                  style={{\r\n                    fontSize: \"1.2rem\",\r\n                    marginBottom: \"0px\",\r\n                  }}\r\n                >\r\n                  Adventure pack:\r\n                </label>\r\n                <input\r\n                  style={{\r\n                    maxWidth: \"175px\",\r\n                    width: \"100%\",\r\n                    height: \"max-content\",\r\n                  }}\r\n                  type=\"text\"\r\n                  id=\"adventurepack\"\r\n                  name=\"adventurepack\"\r\n                  className=\"full-width-mobile\"\r\n                  onChange={() => HandleAdventurePackFilter()}\r\n                />\r\n                <label\r\n                  htmlFor=\"levelfilter\"\r\n                  style={{\r\n                    fontSize: \"1.2rem\",\r\n                    marginBottom: \"0px\",\r\n                  }}\r\n                >\r\n                  Level (e.g. \"1,3,5-9\"):\r\n                </label>\r\n                <input\r\n                  style={{\r\n                    maxWidth: \"100px\",\r\n                    width: \"100%\",\r\n                    height: \"max-content\",\r\n                  }}\r\n                  type=\"text\"\r\n                  id=\"levelfilter\"\r\n                  name=\"levelfilter\"\r\n                  className=\"full-width-mobile\"\r\n                  onChange={() => HandleLevelFilter()}\r\n                />\r\n                <label\r\n                  style={{\r\n                    fontSize: \"1.2rem\",\r\n                    marginLeft: \"10px\",\r\n                  }}\r\n                >\r\n                  <input\r\n                    className=\"input-radio\"\r\n                    name=\"raidsonly\"\r\n                    type=\"checkbox\"\r\n                    checked={showRaidsOnly}\r\n                    onChange={() => {\r\n                      setShowRaidsOnly(!showRaidsOnly);\r\n                    }}\r\n                  />\r\n                  Raids only\r\n                </label>\r\n                <div className=\"audit-report-time\">\r\n                  <p style={{ fontSize: \"medium\" }}>\r\n                    Audit performed {startTime.toString()} ran for{\" \"}\r\n                    {ellapsedTime / 1000}s (cached)\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <QuestTable\r\n                data={paginatedQuestList}\r\n                showLastUpdated={false}\r\n                reportQuest={(quest) => reportQuest(quest)}\r\n                handleSelection={(quest) => loadQuest(quest)}\r\n                collapsed={false}\r\n                pageNumber={pageNumber}\r\n                pageSize={PAGE_SIZE}\r\n                handleSort={(style) => {\r\n                  if (sortStyle === style) {\r\n                    if (sortDirection === \"ascending\") {\r\n                      setSortDirection(\"descending\");\r\n                    } else {\r\n                      setSortDirection(\"ascending\");\r\n                    }\r\n                  } else {\r\n                    setSortDirection(\"ascending\");\r\n                    set_sortStyle(style);\r\n                  }\r\n                }}\r\n              />\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"row\",\r\n                  gap: \"5px\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                  flexWrap: \"wrap\",\r\n                }}\r\n              >\r\n                {filteredQuestList &&\r\n                  [\r\n                    ...Array(Math.ceil(filteredQuestList.length / PAGE_SIZE)),\r\n                  ].map((o, i) => (\r\n                    <div\r\n                      key={i}\r\n                      className={\r\n                        pageNumber === i\r\n                          ? \"paginationPage active\"\r\n                          : \"paginationPage\"\r\n                      }\r\n                      onClick={() => {\r\n                        set_pageNumber(i);\r\n                      }}\r\n                    >\r\n                      {i + 1}\r\n                    </div>\r\n                  ))}\r\n              </div>\r\n            </ContentCluster>\r\n            {getWarningMessage(totalDataPoints)}\r\n            <ContentCluster\r\n              title={\r\n                <span>\r\n                  Duration Distribution for{\" \"}\r\n                  {questName ? (\r\n                    <span className=\"lfm-number\">{questName}</span>\r\n                  ) : (\r\n                    \"(no quest selected)\"\r\n                  )}\r\n                </span>\r\n              }\r\n              altTitle=\"Duration Distribution\"\r\n              description=\"\"\r\n            >\r\n              <p\r\n                style={{\r\n                  fontSize: \"large\",\r\n                  marginBottom: \"0px\",\r\n                }}\r\n              >\r\n                Average duration:{\" \"}\r\n                <span className=\"lfm-number\">\r\n                  {average !== null ? `${average} minutes` : \"N/A\"}\r\n                </span>{\" \"}\r\n                | Standard deviation:{\" \"}\r\n                <span className=\"lfm-number\">\r\n                  {standardDeviation !== null\r\n                    ? `${standardDeviation} minutes`\r\n                    : \"N/A\"}\r\n                </span>{\" \"}\r\n                | Outliers excluded:{\" \"}\r\n                <span className=\"lfm-number\">\r\n                  {outlierCount !== null ? `${outlierCount}` : \"N/A\"}\r\n                </span>\r\n              </p>\r\n              <p\r\n                style={{\r\n                  fontSize: \"large\",\r\n                  marginBottom: \"0px\",\r\n                }}\r\n              >\r\n                Total time recorded:{\" \"}\r\n                <span className=\"lfm-number\">\r\n                  {totalTime !== null ? `${totalTime} minutes` : \"N/A\"}\r\n                </span>{\" \"}\r\n                | Total data points:{\" \"}\r\n                <span className=\"lfm-number\">\r\n                  {totalDataPoints !== null ? `${totalDataPoints}` : \"N/A\"}\r\n                </span>\r\n              </p>\r\n              <ChartBar\r\n                keys={[\"Frequency\"]}\r\n                indexBy=\"Duration\"\r\n                legendBottom=\"Duration (miuntes)\"\r\n                legendLeft=\"Frequency\"\r\n                data={durationData}\r\n                loadingMessage=\"Click on a quest to view data\"\r\n                noAnim={true}\r\n                hideLegend={true}\r\n              />\r\n            </ContentCluster>\r\n            <ContentCluster\r\n              title={\r\n                <span>\r\n                  Popularity Over Time for{\" \"}\r\n                  {questName ? (\r\n                    <span className=\"lfm-number\">{questName}</span>\r\n                  ) : (\r\n                    \"(no quest selected)\"\r\n                  )}\r\n                </span>\r\n              }\r\n              altTitle=\"Popularity Over Time\"\r\n              description=\"Recent popularity of this quest shown as daily averages.\"\r\n            >\r\n              <ChartLine\r\n                keys={[\"Instances\"]}\r\n                indexBy=\"Time\"\r\n                legendBottom=\"Date\"\r\n                legendLeft=\"Instances\"\r\n                data={popularityOverTimeData}\r\n                loadingMessage=\"Click on a quest to view data\"\r\n                noAnim={true}\r\n                title=\"Popularity over time\"\r\n                marginBottom={100}\r\n                hideLegend={true}\r\n                // tickValues=\"every 1 day\"\r\n                trendType=\"quarter\"\r\n                curve=\"linear\"\r\n              />\r\n            </ContentCluster>\r\n            <ContentCluster\r\n              title={\r\n                <span>\r\n                  Average Duration Over Time for{\" \"}\r\n                  {questName ? (\r\n                    <span className=\"lfm-number\">{questName}</span>\r\n                  ) : (\r\n                    \"(no quest selected)\"\r\n                  )}\r\n                </span>\r\n              }\r\n              altTitle=\"Average Duration Over Time\"\r\n              description=\"Recent duration of this quest shown as daily averages.\"\r\n            >\r\n              <ChartLine\r\n                keys={[\"Instances\"]}\r\n                indexBy=\"Time\"\r\n                legendBottom=\"Date\"\r\n                legendLeft=\"Duration (minutes)\"\r\n                data={durationOverTimeData}\r\n                loadingMessage=\"Click on a quest to view data\"\r\n                noAnim={true}\r\n                title=\"Average duration over time\"\r\n                marginBottom={100}\r\n                hideLegend={true}\r\n                // tickValues=\"every 1 day\"\r\n                trendType=\"quarter\"\r\n                curve=\"linear\"\r\n              />\r\n            </ContentCluster>\r\n            <ContentCluster\r\n              title={\r\n                <span>\r\n                  Popularity Throughout the Week for{\" \"}\r\n                  {questName ? (\r\n                    <span className=\"lfm-number\">{questName}</span>\r\n                  ) : (\r\n                    \"(no quest selected)\"\r\n                  )}\r\n                </span>\r\n              }\r\n              altTitle=\"Popularity Throughout the Week\"\r\n              description=\"Popularity of this quest shown as hourly averages throughout the week.\"\r\n            >\r\n              <ChartBar\r\n                keys={[\"Instances\"]}\r\n                indexBy=\"Time\"\r\n                legendBottom=\"Time of Week (Hours, offset from Sunday 00:00)\"\r\n                legendLeft=\"Instances\"\r\n                data={datetimeData}\r\n                loadingMessage=\"Click on a quest to view data\"\r\n                noAnim={true}\r\n                days={true}\r\n                hideLegend={true}\r\n              />\r\n            </ContentCluster>\r\n            <ContentCluster\r\n              title={\r\n                <span>\r\n                  Popularity Throughout the Day for{\" \"}\r\n                  {questName ? (\r\n                    <span className=\"lfm-number\">{questName}</span>\r\n                  ) : (\r\n                    \"(no quest selected)\"\r\n                  )}\r\n                </span>\r\n              }\r\n              altTitle=\"Popularity Over Time\"\r\n              description=\"Popularity of this quest shown as hourly averages throughout the day.\"\r\n            >\r\n              <ChartBar\r\n                keys={[\"Instances\"]}\r\n                indexBy=\"Time\"\r\n                legendBottom=\"Time of Day (24-hour format)\"\r\n                legendLeft=\"Instances\"\r\n                data={todData}\r\n                loadingMessage=\"Click on a quest to view data\"\r\n                noAnim={true}\r\n                hideLegend={true}\r\n              />\r\n            </ContentCluster>\r\n            <ContentCluster\r\n              title={\r\n                <span>\r\n                  Popularity by Server for{\" \"}\r\n                  {questName ? (\r\n                    <span className=\"lfm-number\">{questName}</span>\r\n                  ) : (\r\n                    \"(no quest selected)\"\r\n                  )}\r\n                </span>\r\n              }\r\n              altTitle=\"Popularity by Server\"\r\n              description=\"Popularity of this quest shown as server averages.\"\r\n            >\r\n              <ChartPie\r\n                data={serverDistData}\r\n                loadingMessage=\"Click on a quest to view data\"\r\n                noAnim={true}\r\n                useDataColors={true}\r\n                forceHardcore={true}\r\n              />\r\n            </ContentCluster>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quests;\r\n"],"sourceRoot":""}