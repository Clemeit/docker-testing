{"version":3,"sources":["components/iot/Steps.jsx"],"names":["Steps","props","React","useState","rawData","setRawData","hours","setHours","hoursRef","useRef","current","summaryData","setSummaryData","millis","setMillis","convertToTimeString","time","getUTCFullYear","getUTCMonth","toString","padStart","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getRecentEnvironment","data","seconds","checking","count","intensity","getTime","i","length","Date","datetime","Math","abs","max","refreshStepData","Post","then","val","frequencydata","intensitydata","now","push","x","y","TIME_INTERVAL","frequency","id","color","summarize","catch","err","useEffect","interval","setInterval","interval2","clearInterval","small","showTitle","showSubtitle","showButtons","hideOnMobile","hideVote","title","subtitle","className","style","display","flexDirection","alignItems","justifyContent","htmlFor","fontSize","lineHeight","marginBottom","value","onChange","e","target","marginLeft","marginRight","width","textAlign","onClick","showActions","trendType","curve","reportReference","height","padding","sort","a","b","map","entry","secdiff","round","displaytext","mins","displaycolor","toLocaleString"],"mappings":"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","file":"static/js/15.15de3dff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Banner from \"../global/Banner\";\r\nimport ContentCluster from \"../global/ContentCluster\";\r\nimport ChartLine from \"../global/ChartLine\";\r\nimport { Fetch, Post } from \"../../services/DataLoader\";\r\n\r\nconst Steps = (props) => {\r\n  const [rawData, setRawData] = React.useState([]);\r\n  const [hours, setHours] = React.useState(24);\r\n  const hoursRef = React.useRef(hours);\r\n  hoursRef.current = hours;\r\n  const [summaryData, setSummaryData] = React.useState(null);\r\n  const [millis, setMillis] = React.useState(0);\r\n\r\n  function summarize(data) {\r\n    let frequencydata = [];\r\n    let intensitydata = [];\r\n    const TIME_INTERVAL = 240; // seconds\r\n\r\n    let now = new Date(data[0].datetime);\r\n    while (now.getTime() < new Date(data[data.length - 1].datetime).getTime()) {\r\n      let { count, intensity } = getRecentEnvironment(data, now, TIME_INTERVAL);\r\n      frequencydata.push({\r\n        x: convertToTimeString(now),\r\n        y: count,\r\n      });\r\n      intensitydata.push({\r\n        x: convertToTimeString(now),\r\n        y: intensity,\r\n      });\r\n      now = new Date(now.getTime() + TIME_INTERVAL * 1000);\r\n    }\r\n\r\n    let frequencychartdata = [\r\n      {\r\n        id: \"Steps\",\r\n        color: \"hsl(200, 100%, 50%)\",\r\n        data: frequencydata,\r\n      },\r\n    ];\r\n    let intensitychartdata = [\r\n      {\r\n        id: \"Intensity\",\r\n        color: \"hsl(30, 100%, 50%)\",\r\n        data: intensitydata,\r\n      },\r\n    ];\r\n\r\n    setSummaryData({\r\n      frequency: frequencychartdata,\r\n      intensity: intensitychartdata,\r\n    });\r\n  }\r\n\r\n  function convertToTimeString(time) {\r\n    return `${time.getUTCFullYear()}-${(time.getUTCMonth() + 1)\r\n      .toString()\r\n      .padStart(2, \"0\")}-${time.getUTCDate().toString().padStart(2, \"0\")}T${time\r\n      .getUTCHours()\r\n      .toString()\r\n      .padStart(2, \"0\")}:${time\r\n      .getUTCMinutes()\r\n      .toString()\r\n      .padStart(2, \"0\")}:${time\r\n      .getUTCSeconds()\r\n      .toString()\r\n      .padStart(2, \"0\")}.000Z`;\r\n  }\r\n\r\n  function getRecentEnvironment(data, time, seconds) {\r\n    let count = 0;\r\n    let intensity = 0;\r\n    let current = time.getTime();\r\n    let checking;\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      checking = new Date(data[i].datetime).getTime();\r\n      if (Math.abs(current - checking) <= seconds * 1000) {\r\n        count++;\r\n      }\r\n      if (Math.abs(current - checking) <= seconds * 500) {\r\n        intensity = Math.max(intensity, data[i].intensity);\r\n      }\r\n    }\r\n\r\n    return { count, intensity };\r\n  }\r\n\r\n  function refreshStepData() {\r\n    Post(\r\n      `https://api.ddoaudit.com/iot/steps`,\r\n      { hours: hoursRef.current },\r\n      5000\r\n    )\r\n      .then((val) => {\r\n        summarize(val);\r\n        setRawData(val);\r\n      })\r\n      .catch((err) => {});\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    refreshStepData();\r\n    setMillis(new Date().getTime());\r\n    const interval = setInterval(() => refreshStepData(), 30000);\r\n    const interval2 = setInterval(() => setMillis(new Date().getTime()), 1000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n      clearInterval(interval2);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Banner\r\n        small={true}\r\n        showTitle={true}\r\n        showSubtitle={true}\r\n        showButtons={false}\r\n        hideOnMobile={true}\r\n        hideVote={true}\r\n        title=\"Steps\"\r\n        subtitle=\"Step Detector\"\r\n      />\r\n      <div className=\"content-container\">\r\n        <div className=\"top-content-padding shrink-on-mobile\" />\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <label\r\n            htmlFor=\"hours-value\"\r\n            style={{\r\n              fontSize: \"1.2rem\",\r\n              lineHeight: \"normal\",\r\n              color: \"var(--text)\",\r\n              marginBottom: \"0px\",\r\n            }}\r\n          >\r\n            Report Hours:\r\n            <input\r\n              id=\"hours-value\"\r\n              value={hours}\r\n              onChange={(e) => setHours(e.target.value)}\r\n              style={{\r\n                marginLeft: \"10px\",\r\n                marginRight: \"20px\",\r\n                width: \"60px\",\r\n                textAlign: \"center\",\r\n              }}\r\n            />\r\n          </label>\r\n          <button onClick={() => refreshStepData()} style={{ width: \"70px\" }}>\r\n            Apply\r\n          </button>\r\n        </div>\r\n        <ContentCluster title=\"Step Detector\">\r\n          <p\r\n            style={{\r\n              fontSize: \"1.5rem\",\r\n              lineHeight: \"normal\",\r\n              color: \"var(--text)\",\r\n            }}\r\n          >\r\n            The frequency of steps occurring over time.\r\n          </p>\r\n          <ChartLine\r\n            data={summaryData && summaryData.frequency}\r\n            showActions={false}\r\n            trendType=\"day\"\r\n            curve=\"linear\"\r\n            reportReference={null}\r\n            marginBottom={0}\r\n            height=\"460px\"\r\n          />\r\n          <p\r\n            style={{\r\n              fontSize: \"1.5rem\",\r\n              lineHeight: \"normal\",\r\n              color: \"var(--text)\",\r\n            }}\r\n          >\r\n            The intensity of steps occurring over time.\r\n          </p>\r\n          <ChartLine\r\n            data={summaryData && summaryData.intensity}\r\n            showActions={false}\r\n            trendType=\"day\"\r\n            curve=\"linear\"\r\n            reportReference={null}\r\n            marginBottom={0}\r\n            height=\"460px\"\r\n          />\r\n          <p\r\n            style={{\r\n              fontSize: \"1.5rem\",\r\n              lineHeight: \"normal\",\r\n              color: \"var(--text)\",\r\n            }}\r\n          >\r\n            Most recent activity.\r\n          </p>\r\n          <table style={{ fontSize: \"1.2rem\" }}>\r\n            <tr>\r\n              <th style={{ padding: \"5px 20px 5px 0px\" }}>Time</th>\r\n              <th style={{ padding: \"5px 20px 5px 0px\" }}>Intensity</th>\r\n            </tr>\r\n            {rawData\r\n              .sort(\r\n                (a, b) =>\r\n                  new Date(b.datetime).getTime() -\r\n                  new Date(a.datetime).getTime()\r\n              )\r\n              .map((entry, i) => {\r\n                let secdiff = Math.round(\r\n                  (millis - new Date(entry.datetime).getTime()) / 1000\r\n                );\r\n\r\n                if (secdiff > 60 * 5) {\r\n                  return null;\r\n                }\r\n\r\n                let displaytext = \"\";\r\n                if (secdiff < 15) {\r\n                  displaytext = \"Just now\";\r\n                } else if (secdiff < 60) {\r\n                  displaytext = `${secdiff} seconds ago`;\r\n                } else if (secdiff < 60 * 60) {\r\n                  let mins = Math.round(secdiff / 60);\r\n                  displaytext = `${mins} minute${mins === 1 ? \"\" : \"s\"} ago`;\r\n                } else {\r\n                  let hours = Math.round(secdiff / (60 * 60));\r\n                  displaytext = `${hours} hour${hours === 1 ? \"\" : \"s\"} ago`;\r\n                }\r\n\r\n                let displaycolor = \"white\";\r\n                if (entry.intensity <= 100) {\r\n                  displaycolor = \"white\";\r\n                } else if (entry.intensity <= 200) {\r\n                  displaycolor = \"orange\";\r\n                } else if (entry.intensity <= 400) {\r\n                  displaycolor = \"#ff4400\";\r\n                } else if (entry.intensity > 400) {\r\n                  displaycolor = \"red\";\r\n                }\r\n\r\n                return (\r\n                  <tr key={i} style={{ color: displaycolor }}>\r\n                    <td\r\n                      style={{\r\n                        padding: \"5px 20px 5px 0px\",\r\n                      }}\r\n                    >\r\n                      {new Date(entry.datetime).toLocaleString()} ({displaytext}\r\n                      )\r\n                    </td>\r\n                    <td\r\n                      style={{\r\n                        padding: \"5px 20px 5px 0px\",\r\n                      }}\r\n                    >\r\n                      {entry.intensity}\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n          </table>\r\n        </ContentCluster>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Steps;\r\n"],"sourceRoot":""}